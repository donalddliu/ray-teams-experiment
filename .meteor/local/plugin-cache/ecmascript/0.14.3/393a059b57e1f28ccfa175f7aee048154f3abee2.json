{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/main.js","filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"let Empirica;\nmodule.link(\"meteor/empirica:core\", {\n  default(v) {\n    Empirica = v;\n  }\n\n}, 0);\nmodule.link(\"./bots.js\");\nmodule.link(\"./callbacks.js\");\nlet testSymbols;\nmodule.link(\"./constants\", {\n  testSymbols(v) {\n    testSymbols = v;\n  }\n\n}, 1);\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const network = game.treatment.networkStructure;\n  const pairs = network.split(\",\");\n  console.log(\"Network Structure:\");\n  console.log(pairs);\n  const nodes = [];\n\n  for (let i = 0; i <= game.players.length; i++) {\n    nodes.push(i);\n  }\n\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", \"/avatars/jdenticon/\".concat(player._id));\n    player.set(\"score\", 0);\n    player.set(\"nodeID\");\n  }); // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n\n  const round = game.addRound();\n\n  _.times(testSymbols.length, i => {\n    const stage = round.addStage({\n      name: i.toString(),\n      displayName: testSymbols[i].taskName,\n      answer: testSymbols[i].answer,\n      durationInSeconds: 300\n    });\n    stage.set(\"task\", testSymbols[i]);\n    stage.set(\"answer\", testSymbols[i].answer); // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n});","map":{"version":3,"sources":["server/main.js"],"names":["Empirica","module","link","default","v","testSymbols","gameInit","game","network","treatment","networkStructure","pairs","split","console","log","nodes","i","players","length","push","forEach","player","set","_id","round","addRound","_","times","stage","addStage","name","toString","displayName","taskName","answer","durationInSeconds"],"mappings":"AAAA,IAAIA,QAAJ;AAAaC,MAAM,CAACC,IAAP,CAAY,sBAAZ,EAAmC;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,QAAQ,GAACI,CAAT;AAAW;;AAAvB,CAAnC,EAA4D,CAA5D;AAA+DH,MAAM,CAACC,IAAP,CAAY,WAAZ;AAAyBD,MAAM,CAACC,IAAP,CAAY,gBAAZ;AAA8B,IAAIG,WAAJ;AAAgBJ,MAAM,CAACC,IAAP,CAAY,aAAZ,EAA0B;AAACG,EAAAA,WAAW,CAACD,CAAD,EAAG;AAACC,IAAAA,WAAW,GAACD,CAAZ;AAAc;;AAA9B,CAA1B,EAA0D,CAA1D;AAMnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,QAAQ,CAACM,QAAT,CAAkBC,IAAI,IAAI;AACxB,QAAMC,OAAO,GAAGD,IAAI,CAACE,SAAL,CAAeC,gBAA/B;AACA,QAAMC,KAAK,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,QAAMI,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIT,IAAI,CAACU,OAAL,CAAaC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC7CD,IAAAA,KAAK,CAACI,IAAN,CAAWH,CAAX;AACD;;AAIDT,EAAAA,IAAI,CAACU,OAAL,CAAaG,OAAb,CAAqB,CAACC,MAAD,EAASL,CAAT,KAAe;AAClCK,IAAAA,MAAM,CAACC,GAAP,CAAW,QAAX,+BAA2CD,MAAM,CAACE,GAAlD;AACAF,IAAAA,MAAM,CAACC,GAAP,CAAW,OAAX,EAAoB,CAApB;AAEAD,IAAAA,MAAM,CAACC,GAAP,CAAW,QAAX;AACD,GALD,EAbwB,CAqBxB;AACA;;AACA,QAAME,KAAK,GAAGjB,IAAI,CAACkB,QAAL,EAAd;;AACAC,EAAAA,CAAC,CAACC,KAAF,CAAStB,WAAW,CAACa,MAArB,EAA6BF,CAAC,IAAI;AAChC,UAAMY,KAAK,GAAGJ,KAAK,CAACK,QAAN,CAAe;AAC3BC,MAAAA,IAAI,EAAEd,CAAC,CAACe,QAAF,EADqB;AAE3BC,MAAAA,WAAW,EAAE3B,WAAW,CAACW,CAAD,CAAX,CAAeiB,QAFD;AAG3BC,MAAAA,MAAM,EAAE7B,WAAW,CAACW,CAAD,CAAX,CAAekB,MAHI;AAI3BC,MAAAA,iBAAiB,EAAE;AAJQ,KAAf,CAAd;AAMAP,IAAAA,KAAK,CAACN,GAAN,CAAU,MAAV,EAAkBjB,WAAW,CAACW,CAAD,CAA7B;AACAY,IAAAA,KAAK,CAACN,GAAN,CAAU,QAAV,EAAoBjB,WAAW,CAACW,CAAD,CAAX,CAAekB,MAAnC,EARgC,CAUhC;AACA;AACD,GAZD;AAaD,CArCD","sourcesContent":["import Empirica from \"meteor/empirica:core\";\nimport \"./bots.js\";\nimport \"./callbacks.js\";\n\nimport { testSymbols } from \"./constants\"; \n\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const network = game.treatment.networkStructure\n  const pairs = network.split(\",\");\n  console.log(\"Network Structure:\");\n  console.log(pairs);\n\n  const nodes = [];\n  for (let i = 0; i <= game.players.length; i++) {\n    nodes.push(i);\n  }\n\n\n\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", `/avatars/jdenticon/${player._id}`);\n    player.set(\"score\", 0);\n\n    player.set(\"nodeID\")\n  });\n\n\n  // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n  const round = game.addRound();\n  _.times( testSymbols.length, i => {\n    const stage = round.addStage({\n      name: i.toString(),\n      displayName: testSymbols[i].taskName,\n      answer: testSymbols[i].answer,\n      durationInSeconds: 300\n    });\n    stage.set(\"task\", testSymbols[i]);\n    stage.set(\"answer\", testSymbols[i].answer)\n\n    // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n});\n"]},"sourceType":"module","hash":"393a059b57e1f28ccfa175f7aee048154f3abee2"}
