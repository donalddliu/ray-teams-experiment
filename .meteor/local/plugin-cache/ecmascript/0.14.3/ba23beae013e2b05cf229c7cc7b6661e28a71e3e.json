{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/client/intro/mid-survey/MidSurveyOne.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/intro/mid-survey/MidSurveyOne.jsx","filename":"/Users/donaldliu/Documents/ray-experiment/client/intro/mid-survey/MidSurveyOne.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/client/intro/mid-survey/MidSurveyOne.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/intro/mid-survey/MidSurveyOne.jsx"}},"code":"module.export({\n  default: () => MidSurveyOne\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Centered;\nmodule.link(\"meteor/empirica:core\", {\n  Centered(v) {\n    Centered = v;\n  }\n\n}, 1);\n\nconst Radio = (_ref) => {\n  let {\n    selected,\n    name,\n    value,\n    label,\n    onChange\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"label\", {\n    className: \"questionnaire-radio\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"quiz-button\",\n    type: \"radio\",\n    name: name,\n    value: value,\n    checked: selected === value,\n    onChange: onChange\n  }), label);\n};\n\nclass MidSurveyOne extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n\n    this.handleChange = event => {\n      const el = event.currentTarget;\n      this.setState({\n        [el.name]: el.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      const {\n        hasPrev,\n        hasNext,\n        onNext,\n        onPrev,\n        game,\n        player\n      } = this.props;\n      event.preventDefault();\n\n      if (this.state.response === 'yes') {\n        onNext();\n      } else {\n        player.exit(\"failedQuestion\");\n      }\n    };\n  }\n\n  render() {\n    const {\n      player,\n      game\n    } = this.props;\n    const {\n      response\n    } = this.state;\n    const network = players.get(\"neighbors\");\n    console.log(game.players);\n    return /*#__PURE__*/React.createElement(Centered, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intro-heading questionnaire-heading\"\n    }, \" To complete the challenge, please fill in the following questionnaire \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questionnaire-content-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questionnaire-body\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"questionnaire-question\"\n    }, \" Did your group have a leader? If so, who?\"), network.map(otherNodeId => {\n      const otherPlayerId = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId)).id;\n      return /*#__PURE__*/React.createElement(Radio, {\n        selected: response,\n        key: otherPlayerId,\n        name: \"response\",\n        value: otherPlayerId,\n        label: otherPlayerId,\n        onChange: this.handleChange\n      });\n    }), /*#__PURE__*/React.createElement(Radio, {\n      selected: response,\n      name: \"response\",\n      value: \"myself\",\n      label: \"Myself\",\n      onChange: this.handleChange\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"questionnaire-btn-container\",\n      onSubmit: this.handleSubmit\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: !response ? \"arrow-button button-submit-disabled\" : \"arrow-button button-submit\",\n      disabled: !response,\n      type: \"submit\"\n    }, \" Submit \"))));\n  }\n\n}","map":{"version":3,"sources":["client/intro/mid-survey/MidSurveyOne.jsx"],"names":["module","export","default","MidSurveyOne","React","link","v","Centered","Radio","selected","name","value","label","onChange","Component","state","handleChange","event","el","currentTarget","setState","handleSubmit","hasPrev","hasNext","onNext","onPrev","game","player","props","preventDefault","response","exit","render","network","players","get","console","log","map","otherNodeId","otherPlayerId","find","p","parseInt","id"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n\nimport { Centered } from \"meteor/empirica:core\";\n\nconst Radio = ({ selected, name, value, label, onChange }) => (\n    <label className=\"questionnaire-radio\">\n        <input\n        className=\"quiz-button\"\n        type=\"radio\"\n        name={name}\n        value={value}\n        checked={selected === value}\n        onChange={onChange}\n        />\n        {label}\n    </label>\n);\n\nexport default class MidSurveyOne extends React.Component {\n  state = { };\n\n  handleChange = event => {\n    const el = event.currentTarget;\n    this.setState({ [el.name]: el.value });\n  };\n\n  handleSubmit = event => {\n    const { hasPrev, hasNext, onNext, onPrev, game, player } = this.props;\n    event.preventDefault();\n    if (this.state.response === 'yes') {\n        onNext();\n    } else {\n        player.exit(\"failedQuestion\");\n    }\n  };\n\n  render() {\n    const { player, game } = this.props;\n    const { response } = this.state;\n\n    const network = players.get(\"neighbors\");\n    console.log(game.players)\n    return (\n      <Centered>\n        <div className=\"intro-heading questionnaire-heading\"> To complete the challenge, please fill in the following questionnaire </div>\n            <div className=\"questionnaire-content-container\">\n                <div className=\"questionnaire-body\">\n                    <label className=\"questionnaire-question\"> Did your group have a leader? If so, who?</label>\n                    {network.map(otherNodeId => {\n                        const otherPlayerId = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId)).id\n                        return (\n                            <Radio\n                                selected={response}\n                                key={otherPlayerId}\n                                name=\"response\"\n                                value={otherPlayerId}\n                                label={otherPlayerId}\n                                onChange={this.handleChange}\n                            />\n                        )\n                        })\n                    }\n                    <Radio\n                        selected={response}\n                        name=\"response\"\n                        value=\"myself\"\n                        label=\"Myself\"\n                        onChange={this.handleChange}\n                    />\n                </div>\n                <form className=\"questionnaire-btn-container\" onSubmit={this.handleSubmit}>\n                    <button \n                        className={!response ? \"arrow-button button-submit-disabled\" : \"arrow-button button-submit\"}\n                        disabled={!response} type=\"submit\"> Submit </button> \n                </form>\n            </div>\n      </Centered>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"ba23beae013e2b05cf229c7cc7b6661e28a71e3e"}
