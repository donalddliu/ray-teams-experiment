{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/main.js","filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"let Empirica;\nmodule.link(\"meteor/empirica:core\", {\n  default(v) {\n    Empirica = v;\n  }\n\n}, 0);\nmodule.link(\"./bots.js\");\nmodule.link(\"./callbacks.js\");\nlet testSymbols, testTangrams;\nmodule.link(\"./constants\", {\n  testSymbols(v) {\n    testSymbols = v;\n  },\n\n  testTangrams(v) {\n    testTangrams = v;\n  }\n\n}, 1);\nlet getNeighbors, getFullyConnectedLayer;\nmodule.link(\"./util\", {\n  getNeighbors(v) {\n    getNeighbors = v;\n  },\n\n  getFullyConnectedLayer(v) {\n    getFullyConnectedLayer = v;\n  }\n\n}, 2);\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const {\n    treatment: {\n      playerCount,\n      networkStructure,\n      numTaskRounds,\n      numSurveyRounds,\n      setSizeBasedOnPlayerCount,\n      userInactivityDuration,\n      taskDuration,\n      defaultSetSize,\n      surveyDuration,\n      resultsDuration\n    }\n  } = game;\n  const symbolSet = testTangrams;\n  const setSize = setSizeBasedOnPlayerCount ? playerCount + 1 : defaultSetSize; //TODO: can change default value in settings\n\n  const numRoundsBeforeSurvey = numTaskRounds / numSurveyRounds;\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", \"/avatars/jdenticon/\".concat(player._id));\n    player.set(\"score\", 0); // Give each player a nodeId based on their position (indexed at 1)\n\n    player.set(\"nodeId\", i + 1);\n    player.set(\"name\", player.id);\n  });\n\n  if (game.treatment.playerCount < game.players.length) {\n    getFullyConnectedLayer(game);\n    game.players.forEach(p => {\n      // p.set(\"neighbors\", getNeighbors(networkStructure, p));\n      console.log(p.get(\"neighbors\"));\n    });\n  } else {\n    game.players.forEach(p => {\n      p.set(\"neighbors\", getNeighbors(networkStructure, p));\n      console.log(p.get(\"neighbors\"));\n    });\n  } // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n\n\n  _.times(numTaskRounds, i => {\n    const round = game.addRound();\n    const {\n      symbols,\n      taskName,\n      answer\n    } = symbolSet[i];\n    const taskStage = round.addStage({\n      name: \"Task\",\n      displayName: taskName,\n      answer: answer,\n      durationInSeconds: taskDuration\n    });\n    taskStage.set(\"task\", symbolSet[i]);\n    getSymbolsForPlayers(symbols, answer, setSize, taskName, game);\n    taskStage.set(\"answer\", symbolSet[i].answer);\n    const resultStage = round.addStage({\n      name: \"Result\",\n      displayName: \"Result\",\n      durationInSeconds: resultsDuration\n    });\n\n    if ((i + 1) % numRoundsBeforeSurvey === 0) {\n      // After 5 task rounds, add a survey round\n      const surveyRound = game.addRound();\n      const surveyStages = surveyRound.addStage({\n        name: \"Survey\",\n        displayName: \"Survey\",\n        durationInSeconds: surveyDuration\n      });\n    } // Question: What's the difference between setting something and\n    // adding it into add stage\n\n  }); // function getSymbolsForPlayers(symbolSet, answer, size, taskName, game) {\n  //   let symbolsWithoutAnswer = symbolSet.filter(symbol => symbol !== answer);\n  //   let shuffledSymbols = shuffle(symbolsWithoutAnswer);\n  //   // game.players.forEach((p) => {\n  //   //   // Finding a random splice of symbols without the answer (hence -2)\n  //   //   const randomIndex = Math.floor(Math.random() * (symbolsWithoutAnswer.length + size - 2));\n  //   //   let subset = shuffledSymbols.splice(randomIndex, randomIndex + size)\n  //   //   // Adding in the answer in a random spot\n  //   //   subset.splice(randomIndex % size, 0, answer);\n  //   //   p.set(`${taskName}`, subset);\n  //   // })\n  //   let symbolFreq = {}\n  //   for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n  //     const symbol = symbolsWithoutAnswer[i]\n  //     // console.log(!symbolFreq.hasOwnProperty(symbol));\n  //     if (!symbolFreq.hasOwnProperty(symbol)) {\n  //       symbolFreq[symbol] = 0\n  //     }\n  //   }\n  //   let subsetsToCreate = game.players.length;\n  //   let subsetArray = []\n  //   let subset = []\n  //   let maxFreq = 0;\n  //   let allSameFreq = true;\n  //   // console.log(subsetsToCreate);\n  //   // console.log(\"Hi\");\n  //   // console.log(symbolFreq);\n  //   while (subsetsToCreate > 0) {\n  //     if (allSameFreq) {\n  //       maxFreq += 1\n  //     }\n  //     for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n  //       const symbol = symbolsWithoutAnswer[i]\n  //       if (symbolFreq[symbol] < maxFreq && !subset.includes(symbol)) { // Add symbols to subset based on the symbol freq\n  //         symbolFreq[symbol] += 1\n  //         subset.push(symbol);\n  //         allSameFreq = false;\n  //       }\n  //       // Subset is only missing answer => add answer\n  //       // Add subset to overall array and reset \n  //       if (subset.length === size - 1) { \n  //         const randomIndex = Math.floor(Math.random() * (size- 1));\n  //         subset.splice(randomIndex, 0, answer);\n  //         subsetArray.push(subset);\n  //         console.log(subset);\n  //         subsetsToCreate -= 1;\n  //         subset = []\n  //       }\n  //     }\n  //     // Check the frequencies of the symbols\n  //     allSameFreq = Object.keys(symbolFreq).every((key) => symbolFreq[key] === maxFreq);\n  //     // console.log(\"Same freq\");\n  //     // console.log(allSameFreq);\n  //   }\n  //   let i = 0;\n  //   game.players.forEach((p) => {\n  //     p.set(`${taskName}`, subsetArray[i]);\n  //     i += 1;\n  //   })\n  // }\n\n\n  function getSymbolsForPlayers(symbolSet, answer, setSize, taskName, game) {\n    let numOverlap = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n    let symbolsWithoutAnswer = symbolSet.filter(symbol => symbol !== answer);\n    symbolsWithoutAnswer = shuffle(symbolsWithoutAnswer);\n    let numPlayers = game.players.length; // Create a dictionary to keep track of how many times symbol has been used\n\n    let symbolFreq = {};\n\n    for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n      let symbol = symbolsWithoutAnswer[i]; // console.log(!symbolFreq.hasOwnProperty(symbol));\n\n      if (!symbolFreq.hasOwnProperty(symbol)) {\n        symbolFreq[symbol] = numPlayers - 1; // Total time a symbol can be used \n      }\n    }\n\n    game.players.forEach(player => {\n      let symbolsPicked = [];\n\n      for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n        let symbol = symbolsWithoutAnswer[i];\n\n        if (symbolsPicked.length < setSize - 1) {\n          // Add symbols until setSize - 1 for answer\n          symbolsPicked.push(symbol);\n          symbolFreq[symbol] -= 1;\n        }\n      }\n\n      symbolsPicked.push(answer); // Add the answer\n\n      for (var symbolToRemove of symbolsPicked) {\n        if (symbolFreq[symbolToRemove] === 0) {\n          // If symbol has been picked n-1 players times, remove it from the set\n          symbolsWithoutAnswer = symbolsWithoutAnswer.filter(symbol => symbol !== symbolToRemove);\n        }\n      }\n\n      symbolsPicked = shuffle(symbolsPicked);\n      player.set(taskName, symbolsPicked);\n    });\n  } // Shuffling arrays:\n  // https://stackoverflow.com/questions/50536044/swapping-all-elements-of-an-array-except-for-first-and-last\n\n\n  function shuffle(symbolSet) {\n    for (i = symbolSet.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [symbolSet[i], symbolSet[j]] = [symbolSet[j], symbolSet[i]];\n    }\n\n    return symbolSet;\n  }\n});","map":{"version":3,"sources":["server/main.js"],"names":["Empirica","module","link","default","v","testSymbols","testTangrams","getNeighbors","getFullyConnectedLayer","gameInit","game","treatment","playerCount","networkStructure","numTaskRounds","numSurveyRounds","setSizeBasedOnPlayerCount","userInactivityDuration","taskDuration","defaultSetSize","surveyDuration","resultsDuration","symbolSet","setSize","numRoundsBeforeSurvey","players","forEach","player","i","set","_id","id","length","p","console","log","get","_","times","round","addRound","symbols","taskName","answer","taskStage","addStage","name","displayName","durationInSeconds","getSymbolsForPlayers","resultStage","surveyRound","surveyStages","numOverlap","symbolsWithoutAnswer","filter","symbol","shuffle","numPlayers","symbolFreq","hasOwnProperty","symbolsPicked","push","symbolToRemove","j","Math","floor","random"],"mappings":"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","sourcesContent":["import Empirica from \"meteor/empirica:core\";\nimport \"./bots.js\";\nimport \"./callbacks.js\";\n\nimport { testSymbols, testTangrams } from \"./constants\"; \nimport { getNeighbors, getFullyConnectedLayer } from \"./util\";\n\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const {\n    treatment: {\n      playerCount,\n      networkStructure,\n      numTaskRounds,\n      numSurveyRounds,\n      setSizeBasedOnPlayerCount,\n      userInactivityDuration,\n      taskDuration,\n      defaultSetSize,\n      surveyDuration,\n      resultsDuration,\n    },\n  } = game;\n\n\n  const symbolSet = testTangrams;\n  const setSize = setSizeBasedOnPlayerCount ? playerCount + 1 : defaultSetSize; //TODO: can change default value in settings\n  const numRoundsBeforeSurvey = numTaskRounds/numSurveyRounds;\n\n\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", `/avatars/jdenticon/${player._id}`);\n    player.set(\"score\", 0);\n\n    // Give each player a nodeId based on their position (indexed at 1)\n    player.set(\"nodeId\", i + 1);\n    player.set(\"name\", player.id);\n  });\n\n\n  if (game.treatment.playerCount < game.players.length) {\n    getFullyConnectedLayer(game);\n    game.players.forEach((p) => {\n      // p.set(\"neighbors\", getNeighbors(networkStructure, p));\n      console.log(p.get(\"neighbors\"));\n    });\n  } else {\n    game.players.forEach((p) => {\n      p.set(\"neighbors\", getNeighbors(networkStructure, p));\n      console.log(p.get(\"neighbors\"));\n    });\n  }\n\n  // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n  _.times( numTaskRounds, i => {\n    const round = game.addRound();\n\n    const {symbols, taskName, answer} = symbolSet[i];\n\n    const taskStage = round.addStage({\n      name: \"Task\",\n      displayName: taskName,\n      answer: answer,\n      durationInSeconds: taskDuration\n    });\n    taskStage.set(\"task\", symbolSet[i]);\n    getSymbolsForPlayers(symbols, answer, setSize, taskName, game)\n    taskStage.set(\"answer\", symbolSet[i].answer)\n\n    const resultStage = round.addStage({\n      name: \"Result\",\n      displayName: \"Result\",\n      durationInSeconds: resultsDuration\n    });\n    \n    if ((i+1) % numRoundsBeforeSurvey === 0) { // After 5 task rounds, add a survey round\n      const surveyRound = game.addRound();\n\n      const surveyStages = surveyRound.addStage({\n        name: \"Survey\",\n        displayName: \"Survey\",\n        durationInSeconds: surveyDuration\n      })\n    }\n\n\n    // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n\n\n\n  // function getSymbolsForPlayers(symbolSet, answer, size, taskName, game) {\n  //   let symbolsWithoutAnswer = symbolSet.filter(symbol => symbol !== answer);\n  //   let shuffledSymbols = shuffle(symbolsWithoutAnswer);\n\n  //   // game.players.forEach((p) => {\n  //   //   // Finding a random splice of symbols without the answer (hence -2)\n  //   //   const randomIndex = Math.floor(Math.random() * (symbolsWithoutAnswer.length + size - 2));\n  //   //   let subset = shuffledSymbols.splice(randomIndex, randomIndex + size)\n      \n  //   //   // Adding in the answer in a random spot\n  //   //   subset.splice(randomIndex % size, 0, answer);\n  //   //   p.set(`${taskName}`, subset);\n  //   // })\n\n  //   let symbolFreq = {}\n  //   for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n  //     const symbol = symbolsWithoutAnswer[i]\n  //     // console.log(!symbolFreq.hasOwnProperty(symbol));\n  //     if (!symbolFreq.hasOwnProperty(symbol)) {\n  //       symbolFreq[symbol] = 0\n  //     }\n  //   }\n\n  //   let subsetsToCreate = game.players.length;\n  //   let subsetArray = []\n  //   let subset = []\n  //   let maxFreq = 0;\n  //   let allSameFreq = true;\n  //   // console.log(subsetsToCreate);\n  //   // console.log(\"Hi\");\n  //   // console.log(symbolFreq);\n  //   while (subsetsToCreate > 0) {\n  //     if (allSameFreq) {\n  //       maxFreq += 1\n  //     }\n  //     for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n  //       const symbol = symbolsWithoutAnswer[i]\n  //       if (symbolFreq[symbol] < maxFreq && !subset.includes(symbol)) { // Add symbols to subset based on the symbol freq\n  //         symbolFreq[symbol] += 1\n  //         subset.push(symbol);\n  //         allSameFreq = false;\n\n  //       }\n  //       // Subset is only missing answer => add answer\n  //       // Add subset to overall array and reset \n  //       if (subset.length === size - 1) { \n  //         const randomIndex = Math.floor(Math.random() * (size- 1));\n  //         subset.splice(randomIndex, 0, answer);\n  //         subsetArray.push(subset);\n  //         console.log(subset);\n  //         subsetsToCreate -= 1;\n  //         subset = []\n  //       }\n  //     }\n  //     // Check the frequencies of the symbols\n  //     allSameFreq = Object.keys(symbolFreq).every((key) => symbolFreq[key] === maxFreq);\n  //     // console.log(\"Same freq\");\n  //     // console.log(allSameFreq);\n  //   }\n  //   let i = 0;\n  //   game.players.forEach((p) => {\n  //     p.set(`${taskName}`, subsetArray[i]);\n  //     i += 1;\n  //   })\n\n  // }\n\n  function getSymbolsForPlayers(symbolSet, answer, setSize, taskName, game, numOverlap = 2) {\n      let symbolsWithoutAnswer = symbolSet.filter(symbol => symbol !== answer);\n      symbolsWithoutAnswer = shuffle(symbolsWithoutAnswer);\n      let numPlayers = game.players.length;\n\n      // Create a dictionary to keep track of how many times symbol has been used\n      let symbolFreq = {}\n      for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n        let symbol = symbolsWithoutAnswer[i]\n        // console.log(!symbolFreq.hasOwnProperty(symbol));\n        if (!symbolFreq.hasOwnProperty(symbol)) {\n          symbolFreq[symbol] = numPlayers - 1; // Total time a symbol can be used \n        }\n      }\n\n      game.players.forEach((player) => {\n        let symbolsPicked = [];\n        for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n          let symbol = symbolsWithoutAnswer[i]\n          if (symbolsPicked.length < setSize - 1) { // Add symbols until setSize - 1 for answer\n            symbolsPicked.push(symbol);\n            symbolFreq[symbol] -= 1;\n          }\n        }\n        symbolsPicked.push(answer); // Add the answer\n        for (var symbolToRemove of symbolsPicked) {\n          if (symbolFreq[symbolToRemove] === 0) { // If symbol has been picked n-1 players times, remove it from the set\n            symbolsWithoutAnswer = symbolsWithoutAnswer.filter(symbol => symbol !== symbolToRemove);\n          }\n        }\n\n        symbolsPicked = shuffle(symbolsPicked);\n\n        player.set(taskName, symbolsPicked);\n      })\n\n\n  }\n\n  // Shuffling arrays:\n  // https://stackoverflow.com/questions/50536044/swapping-all-elements-of-an-array-except-for-first-and-last\n  function shuffle(symbolSet) {\n    for (i = symbolSet.length -1 ; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [symbolSet[i], symbolSet[j]] = [symbolSet[j], symbolSet[i]];\n    }\n    return symbolSet;\n  }\n\n});\n"]},"sourceType":"module","hash":"c5cb41a53a7fb9246b859847e3cffa8309b563ba"}
