{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/client/game/mid-survey/MidSurvey2.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"client/game/mid-survey/MidSurvey2.jsx","filename":"/Users/donaldliu/Documents/ray-experiment/client/game/mid-survey/MidSurvey2.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/client/game/mid-survey/MidSurvey2.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/game/mid-survey/MidSurvey2.jsx"}},"code":"var _createSuper;\n\nmodule.link(\"@babel/runtime/helpers/createSuper\", {\n  default: function (v) {\n    _createSuper = v;\n  }\n}, 0);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\nmodule.export({\n  \"default\": function () {\n    return MidSurveyTwo;\n  }\n});\nvar React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar Slider;\nmodule.link(\"meteor/empirica:slider\", {\n  \"default\": function (v) {\n    Slider = v;\n  }\n}, 1);\nvar TimeSync;\nmodule.link(\"meteor/mizzao:timesync\", {\n  TimeSync: function (v) {\n    TimeSync = v;\n  }\n}, 2);\nvar moment;\nmodule.link(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 3);\nvar Centered;\nmodule.link(\"meteor/empirica:core\", {\n  Centered: function (v) {\n    Centered = v;\n  }\n}, 4);\n\nvar MidSurveyTwo = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(MidSurveyTwo, _React$Component);\n\n  var _super = _createSuper(MidSurveyTwo);\n\n  function MidSurveyTwo() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {};\n\n    _this.renderLabels = function (val) {\n      if (val === 0) {\n        // Min value\n        return val + \" Unhappy\";\n      } else if (val === 3) {\n        return val + \" Neutral\";\n      } else if (val === 6) {\n        // Max value\n        return val + \" Happy\";\n      }\n\n      return \"\";\n    };\n\n    _this.handleSubmit = function (event) {\n      var _this$props = _this.props,\n          onNext = _this$props.onNext,\n          player = _this$props.player;\n      var surveyNumber = player.get(\"surveyNumber\");\n      event.preventDefault(); // TODO: log player response to survey question\n\n      player.round.set(\"survey_\" + surveyNumber, _this.state);\n      player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n      onNext();\n    };\n\n    return _this;\n  }\n\n  var _proto = MidSurveyTwo.prototype;\n\n  _proto.componentDidMount = function () {\n    function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          game = _this$props2.game,\n          round = _this$props2.round,\n          stage = _this$props2.stage,\n          player = _this$props2.player;\n      player.get(\"neighbors\").forEach(function (otherNodeId) {\n        var _this2$setState;\n\n        var otherPlayerId = game.players.find(function (p) {\n          return p.get(\"nodeId\") === parseInt(otherNodeId);\n        }).id;\n\n        _this2.setState((_this2$setState = {}, _this2$setState[otherPlayerId] = 0, _this2$setState));\n      });\n    }\n\n    return componentDidMount;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          game = _this$props3.game,\n          round = _this$props3.round,\n          stage = _this$props3.stage,\n          player = _this$props3.player;\n      var response = this.state.response;\n      var network = player.get(\"neighbors\");\n      var surveyNumber = player.get(\"surveyNumber\");\n      var completedWidth = 590 / 5 * surveyNumber;\n      var uncompletedWidth = 590 - completedWidth;\n      var offset = 590 / 5 * 0.5;\n      var stageNumPosition = completedWidth - offset;\n      return /*#__PURE__*/React.createElement(Centered, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"intro-heading questionnaire-heading\"\n      }, \" To complete the challenge, please fill in the following questionnaire \"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"questionnaire-content-container\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-bar\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"completed-bar\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"completed-heading\",\n        style: {\n          marginLeft: stageNumPosition\n        }\n      }, \" \", surveyNumber, \" \"), /*#__PURE__*/React.createElement(\"img\", {\n        src: \"images/hr-color.png\",\n        width: completedWidth + \" px\",\n        height: \"7px\"\n      })), /*#__PURE__*/React.createElement(\"img\", {\n        src: \"images/hr-color-dark.png\",\n        width: uncompletedWidth + \" px\",\n        height: \"7px\"\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"questionnaire-body\"\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"questionnaire-question\"\n      }, \" Please rate how well you have been working with each teammate in the recent trials?\"), network.map(function (otherNodeId) {\n        var otherPlayer = game.players.find(function (p) {\n          return p.get(\"nodeId\") === parseInt(otherNodeId);\n        });\n        var otherPlayerId = otherPlayer.id;\n        var playerIsOnline = otherPlayer.online === true && !otherPlayer.get(\"inactive\");\n\n        var handleSliderChange = function (num) {\n          var _this3$setState;\n\n          // Rounding the number to 2 decimals max\n          _this3.setState((_this3$setState = {}, _this3$setState[otherPlayerId] = num, _this3$setState));\n\n          player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n        };\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"player-slider-container\"\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"player-label\"\n        }, \" \", otherPlayerId, \" \"), /*#__PURE__*/React.createElement(Slider, {\n          key: otherNodeId,\n          min: 0,\n          max: 6,\n          stepSize: 1,\n          disabled: false,\n          showTrackFill: false,\n          name: otherPlayerId,\n          value: _this3.state[otherPlayerId],\n          labelRenderer: _this3.renderLabels,\n          onChange: handleSliderChange\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slider-value-container\",\n          style: {\n            width: \"15%\"\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slider-value\"\n        }, _this3.state[otherPlayerId], \" \")));\n      })), /*#__PURE__*/React.createElement(\"form\", {\n        className: \"questionnaire-btn-container\",\n        onSubmit: this.handleSubmit\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"arrow-button button-submit\",\n        type: \"submit\"\n      }, \" Submit \"))));\n    }\n\n    return render;\n  }();\n\n  return MidSurveyTwo;\n}(React.Component);","map":{"version":3,"sources":["client/game/mid-survey/MidSurvey2.jsx"],"names":["_createSuper","module","link","default","v","_inheritsLoose","export","MidSurveyTwo","React","Slider","TimeSync","moment","Centered","state","renderLabels","val","handleSubmit","event","props","onNext","player","surveyNumber","get","preventDefault","round","set","serverTime","componentDidMount","game","stage","forEach","otherNodeId","otherPlayerId","players","find","p","parseInt","id","setState","render","response","network","completedWidth","uncompletedWidth","offset","stageNumPosition","marginLeft","map","otherPlayer","playerIsOnline","online","handleSliderChange","num","width","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Slider from \"meteor/empirica:slider\";\n\nimport { TimeSync } from \"meteor/mizzao:timesync\";\nimport moment from \"moment\";\nimport { Centered } from \"meteor/empirica:core\";\n\nexport default class MidSurveyTwo extends React.Component {\n    state = {}\n\n  componentDidMount() {\n    const { game, round, stage, player } = this.props;\n\n    player.get(\"neighbors\").forEach(otherNodeId => {\n        const otherPlayerId = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId)).id\n        this.setState({[otherPlayerId] : 0});\n    })\n  }\n\n  renderLabels = (val) => {\n      if (val === 0) { // Min value\n          return `${val} Unhappy`;\n      } else if (val === 3) {\n          return `${val} Neutral`;\n      } else if (val === 6) { // Max value\n          return `${val} Happy`;\n      }\n      return \"\"\n  }\n\n  handleSubmit = event => {\n    const { onNext, player } = this.props;\n    const surveyNumber = player.get(\"surveyNumber\");\n\n    event.preventDefault();\n    // TODO: log player response to survey question\n    player.round.set(`survey_${surveyNumber}`, this.state);\n    player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n\n\n    onNext();\n  };\n\n  \n\n  render() {\n    const { game, round, stage, player } = this.props;\n    const { response } = this.state;\n\n    const network = player.get(\"neighbors\");\n\n    const surveyNumber = player.get(\"surveyNumber\");\n    const completedWidth = 590/5 * surveyNumber\n    const uncompletedWidth = 590 - completedWidth;\n    const offset = 590/5 * 0.5;\n    const stageNumPosition = completedWidth - offset;\n\n    return (\n      <Centered>\n        <div className=\"intro-heading questionnaire-heading\"> To complete the challenge, please fill in the following questionnaire </div>\n            <div className=\"questionnaire-content-container\">\n                <div className=\"progress-bar\">\n                    <div className=\"completed-bar\">\n                        <div className=\"completed-heading\" style={{marginLeft: stageNumPosition }}> {surveyNumber} </div>\n                        <img src={`images/hr-color.png`} width={`${completedWidth} px`} height=\"7px\" />\n                    </div>\n                    <img src={`images/hr-color-dark.png`} width={`${uncompletedWidth} px`} height=\"7px\" />\n                </div>\n                <div className=\"questionnaire-body\">\n                    <label className=\"questionnaire-question\"> Please rate how well you have been working with each teammate in the recent trials?</label>\n                    {network.map(otherNodeId => {\n                        const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n                        const otherPlayerId = otherPlayer.id;\n                        const playerIsOnline = otherPlayer.online === true && !otherPlayer.get(\"inactive\");\n                        const handleSliderChange = (num) => {\n                            // Rounding the number to 2 decimals max\n                            this.setState({[otherPlayerId] : num});\n                            player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n\n                          };\n                        \n                        return (\n                            <div className=\"player-slider-container\">\n                                <div className=\"player-label\"> {otherPlayerId} </div>\n                                <Slider\n                                    key={otherNodeId}\n                                    min={0}\n                                    max={6}\n                                    stepSize={1}\n                                    disabled={false}\n                                    showTrackFill={false}\n                                    name={otherPlayerId}\n                                    value={this.state[otherPlayerId]}\n                                    labelRenderer={this.renderLabels}\n                                    onChange={handleSliderChange}\n                                />\n                                <div className=\"slider-value-container\" style={{width: `15%`}}> \n                                    <div className=\"slider-value\">{this.state[otherPlayerId]} </div>\n                                </div>\n                            </div>\n                            )\n                        })\n                    }\n                    {/* <div className=\"slider-value-container\"> \n                        <div className=\"slider-value\">{sliderValue} </div>\n                    </div> */}\n\n                </div>\n                <form className=\"questionnaire-btn-container\" onSubmit={this.handleSubmit}>\n                    <button \n                        className=\"arrow-button button-submit\"\n                        type=\"submit\"> Submit </button> \n                </form>\n            </div>\n      </Centered>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"55728ea55cd6c55696ad89d2b5bdcb8ee982a3f1"}
