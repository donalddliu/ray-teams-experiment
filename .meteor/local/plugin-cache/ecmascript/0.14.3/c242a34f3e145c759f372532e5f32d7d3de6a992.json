{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/main.js","filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"let Empirica;\nmodule.link(\"meteor/empirica:core\", {\n  default(v) {\n    Empirica = v;\n  }\n\n}, 0);\nmodule.link(\"./bots.js\");\nmodule.link(\"./callbacks.js\");\nlet testSymbols;\nmodule.link(\"./constants\", {\n  testSymbols(v) {\n    testSymbols = v;\n  }\n\n}, 1);\nlet getNeighbors;\nmodule.link(\"./util\", {\n  getNeighbors(v) {\n    getNeighbors = v;\n  }\n\n}, 2);\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const {\n    treatment: {\n      playerCount,\n      networkStructure\n    }\n  } = game;\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", \"/avatars/jdenticon/\".concat(player._id));\n    player.set(\"score\", 0); // Give each player a nodeId based on their position (indexed at 1)\n\n    player.set(\"nodeId\", i + 1);\n    player.set(\"name\", player);\n  });\n  game.players.forEach(p => {\n    p.set(\"neighbors\", getNeighbors(networkStructure, p));\n    console.log(p.get(\"neighbors\"));\n  }); // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n\n  const round = game.addRound();\n\n  _.times(testSymbols.length, i => {\n    const {\n      symbols,\n      taskName,\n      answer\n    } = testSymbols[i];\n    const stage = round.addStage({\n      name: i.toString(),\n      displayName: taskName,\n      answer: answer,\n      durationInSeconds: 300\n    });\n    stage.set(\"task\", testSymbols[i]);\n    getSymbolsForPlayers(symbols, answer, 3, taskName, game);\n    stage.set(\"answer\", testSymbols[i].answer); // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n\n  function getSymbolsForPlayers(symbolSet, answer, size, taskName, game) {\n    let symbolsWithoutAnswer = symbolSet.filter(symbol => symbol !== answer);\n    let shuffledSymbols = shuffle(symbolsWithoutAnswer); // game.players.forEach((p) => {\n    //   // Finding a random splice of symbols without the answer (hence -2)\n    //   const randomIndex = Math.floor(Math.random() * (symbolsWithoutAnswer.length + size - 2));\n    //   let subset = shuffledSymbols.splice(randomIndex, randomIndex + size)\n    //   // Adding in the answer in a random spot\n    //   subset.splice(randomIndex % size, 0, answer);\n    //   p.set(`${taskName}`, subset);\n    // })\n\n    let symbolFreq = {};\n\n    for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n      const symbol = symbolsWithoutAnswer[i]; // console.log(!symbolFreq.hasOwnProperty(symbol));\n\n      if (!symbolFreq.hasOwnProperty(symbol)) {\n        symbolFreq[symbol] = 0;\n      }\n    }\n\n    let subsetsToCreate = game.players.length;\n    let subsetArray = [];\n    let subset = [];\n    let maxFreq = 0;\n    let allSameFreq = true; // console.log(subsetsToCreate);\n    // console.log(\"Hi\");\n    // console.log(symbolFreq);\n\n    while (subsetsToCreate > 0) {\n      if (allSameFreq) {\n        maxFreq += 1;\n      }\n\n      for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n        const symbol = symbolsWithoutAnswer[i];\n\n        if (symbolFreq[symbol] < maxFreq && !subset.includes(symbol)) {\n          // Add symbols to subset based on the symbol freq\n          symbolFreq[symbol] += 1;\n          subset.push(symbol);\n          allSameFreq = false;\n        } // Subset is only missing answer => add answer\n        // Add subset to overall array and reset \n\n\n        if (subset.length === size - 1) {\n          const randomIndex = Math.floor(Math.random() * (size - 1));\n          subset.splice(randomIndex, 0, answer);\n          subsetArray.push(subset);\n          console.log(subset);\n          subsetsToCreate -= 1;\n          subset = [];\n        }\n      } // Check the frequencies of the symbols\n\n\n      allSameFreq = Object.keys(symbolFreq).every(key => symbolFreq[key] === maxFreq); // console.log(\"Same freq\");\n      // console.log(allSameFreq);\n    }\n\n    let i = 0;\n    game.players.forEach(p => {\n      p.set(\"\".concat(taskName), subsetArray[i]);\n      i += 1;\n    });\n  } // Shuffling arrays:\n  // https://stackoverflow.com/questions/50536044/swapping-all-elements-of-an-array-except-for-first-and-last\n\n\n  function shuffle(symbolSet) {\n    for (i = symbolSet.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [symbolSet[i], symbolSet[j]] = [symbolSet[j], symbolSet[i]];\n    }\n\n    return symbolSet;\n  }\n});","map":{"version":3,"sources":["server/main.js"],"names":["Empirica","module","link","default","v","testSymbols","getNeighbors","gameInit","game","treatment","playerCount","networkStructure","players","forEach","player","i","set","_id","p","console","log","get","round","addRound","_","times","length","symbols","taskName","answer","stage","addStage","name","toString","displayName","durationInSeconds","getSymbolsForPlayers","symbolSet","size","symbolsWithoutAnswer","filter","symbol","shuffledSymbols","shuffle","symbolFreq","hasOwnProperty","subsetsToCreate","subsetArray","subset","maxFreq","allSameFreq","includes","push","randomIndex","Math","floor","random","splice","Object","keys","every","key","j"],"mappings":"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","sourcesContent":["import Empirica from \"meteor/empirica:core\";\nimport \"./bots.js\";\nimport \"./callbacks.js\";\n\nimport { testSymbols } from \"./constants\"; \nimport { getNeighbors } from \"./util\";\n\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const {\n    treatment: {\n      playerCount,\n      networkStructure,\n    },\n  } = game;\n\n\n\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", `/avatars/jdenticon/${player._id}`);\n    player.set(\"score\", 0);\n\n    // Give each player a nodeId based on their position (indexed at 1)\n    player.set(\"nodeId\", i + 1);\n    player.set(\"name\", player)\n  });\n\n  game.players.forEach((p) => {\n    p.set(\"neighbors\", getNeighbors(networkStructure, p));\n    console.log(p.get(\"neighbors\"));\n  });\n\n  // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n  const round = game.addRound();\n  _.times( testSymbols.length, i => {\n    const {symbols, taskName, answer} = testSymbols[i];\n\n    const stage = round.addStage({\n      name: i.toString(),\n      displayName: taskName,\n      answer: answer,\n      durationInSeconds: 300\n    });\n    stage.set(\"task\", testSymbols[i]);\n    getSymbolsForPlayers(symbols, answer, 3, taskName, game)\n    stage.set(\"answer\", testSymbols[i].answer)\n\n    // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n\n\n\n  function getSymbolsForPlayers(symbolSet, answer, size, taskName, game) {\n    let symbolsWithoutAnswer = symbolSet.filter(symbol => symbol !== answer);\n    let shuffledSymbols = shuffle(symbolsWithoutAnswer);\n\n    // game.players.forEach((p) => {\n    //   // Finding a random splice of symbols without the answer (hence -2)\n    //   const randomIndex = Math.floor(Math.random() * (symbolsWithoutAnswer.length + size - 2));\n    //   let subset = shuffledSymbols.splice(randomIndex, randomIndex + size)\n      \n    //   // Adding in the answer in a random spot\n    //   subset.splice(randomIndex % size, 0, answer);\n    //   p.set(`${taskName}`, subset);\n    // })\n\n    let symbolFreq = {}\n    for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n      const symbol = symbolsWithoutAnswer[i]\n      // console.log(!symbolFreq.hasOwnProperty(symbol));\n      if (!symbolFreq.hasOwnProperty(symbol)) {\n        symbolFreq[symbol] = 0\n      }\n    }\n\n    let subsetsToCreate = game.players.length;\n    let subsetArray = []\n    let subset = []\n    let maxFreq = 0;\n    let allSameFreq = true;\n    // console.log(subsetsToCreate);\n    // console.log(\"Hi\");\n    // console.log(symbolFreq);\n    while (subsetsToCreate > 0) {\n      if (allSameFreq) {\n        maxFreq += 1\n      }\n      for (let i = 0; i < symbolsWithoutAnswer.length; i++) {\n        const symbol = symbolsWithoutAnswer[i]\n        if (symbolFreq[symbol] < maxFreq && !subset.includes(symbol)) { // Add symbols to subset based on the symbol freq\n          symbolFreq[symbol] += 1\n          subset.push(symbol);\n          allSameFreq = false;\n\n        }\n        // Subset is only missing answer => add answer\n        // Add subset to overall array and reset \n        if (subset.length === size - 1) { \n          const randomIndex = Math.floor(Math.random() * (size- 1));\n          subset.splice(randomIndex, 0, answer);\n          subsetArray.push(subset);\n          console.log(subset);\n          subsetsToCreate -= 1;\n          subset = []\n        }\n      }\n      // Check the frequencies of the symbols\n      allSameFreq = Object.keys(symbolFreq).every((key) => symbolFreq[key] === maxFreq);\n      // console.log(\"Same freq\");\n      // console.log(allSameFreq);\n    }\n    let i = 0;\n    game.players.forEach((p) => {\n      p.set(`${taskName}`, subsetArray[i]);\n      i += 1;\n    })\n\n  }\n\n  // Shuffling arrays:\n  // https://stackoverflow.com/questions/50536044/swapping-all-elements-of-an-array-except-for-first-and-last\n  function shuffle(symbolSet) {\n    for (i = symbolSet.length -1 ; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [symbolSet[i], symbolSet[j]] = [symbolSet[j], symbolSet[i]];\n    }\n    return symbolSet;\n  }\n\n});\n"]},"sourceType":"module","hash":"c242a34f3e145c759f372532e5f32d7d3de6a992"}
