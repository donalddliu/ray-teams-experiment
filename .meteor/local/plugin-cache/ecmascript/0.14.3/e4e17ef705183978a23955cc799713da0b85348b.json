{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/client/game/SocialExposure.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/game/SocialExposure.jsx","filename":"/Users/donaldliu/Documents/ray-experiment/client/game/SocialExposure.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/client/game/SocialExposure.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/game/SocialExposure.jsx"}},"code":"module.export({\n  default: () => SocialExposure\n});\nmodule.link(\"../chat/style.less\");\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Chat;\nmodule.link(\"@empirica/chat\", {\n  Chat(v) {\n    Chat = v;\n  }\n\n}, 1);\nlet ChatContainer;\nmodule.link(\"../chat/ChatContainer.js\", {\n  default(v) {\n    ChatContainer = v;\n  }\n\n}, 2);\nlet Message;\nmodule.link(\"../chat/Message.js\", {\n  default(v) {\n    Message = v;\n  }\n\n}, 3);\nlet Footer;\nmodule.link(\"../chat/Footer.js\", {\n  default(v) {\n    Footer = v;\n  }\n\n}, 4);\nlet TimeSync;\nmodule.link(\"meteor/mizzao:timesync\", {\n  TimeSync(v) {\n    TimeSync = v;\n  }\n\n}, 5);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 6);\nlet Slider;\nmodule.link(\"meteor/empirica:slider\", {\n  default(v) {\n    Slider = v;\n  }\n\n}, 7);\n\nclass SocialExposure extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.audio = new Audio(\"sounds/notification-sound-7062.mp3\");\n\n    this.logIncomingMessage = (msgs, customKey) => {\n      const {\n        game,\n        round,\n        stage,\n        player\n      } = this.props;\n      const messages = round.get(\"\".concat(customKey));\n      const mostRecentMsg = messages[messages.length - 1];\n      console.log(mostRecentMsg);\n      const sender = mostRecentMsg.player._id; // TODO: Check if this only appends if player chat is open\n      // onIncomingMessage logs the message for both sender and receiver\n      // Only log one copy of the message\n\n      if (player._id === sender) {\n        stage.append(\"log\", {\n          verb: \"messageLog\",\n          subjectId: player.id,\n          object: mostRecentMsg,\n          at: moment(TimeSync.serverTime(null, 1000))\n        });\n      }\n\n      if (player._id !== sender) {\n        console.log(\"Message was sent\");\n        const activeChats = player.get(\"activeChats\");\n\n        if (!activeChats.includes(customKey)) {\n          console.log(\"Chat closed but message delivered\");\n        }\n\n        this.audio.play();\n      }\n    };\n  }\n\n  renderSocialInteraction(otherPlayer) {\n    const value = otherPlayer.round.get(\"value\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alter\",\n      key: otherPlayer._id\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: otherPlayer.get(\"avatar\"),\n      className: \"profile-avatar\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"range\"\n    }, /*#__PURE__*/React.createElement(Slider, {\n      min: 0,\n      max: 1,\n      stepSize: 0.01,\n      value: value,\n      disabled: true,\n      hideHandleOnEmpty: true\n    })));\n  }\n\n  render() {\n    const {\n      game,\n      round,\n      player,\n      onCloseChat,\n      activeChats\n    } = this.props;\n    const network = player.get(\"neighbors\"); // reactive time value only updates at 1000 ms\n\n    const timeStamp = new Date(TimeSync.serverTime(null, 1000));\n\n    if (network.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"all-chats-container\"\n    }, network.map(otherNodeId => {\n      var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherNodeId)];\n      pairOfPlayers.sort((p1, p2) => p1 - p2);\n      const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n      const otherPlayerId = otherPlayer.id;\n      const playerIsOnline = otherPlayer.online === true && !otherPlayer.get(\"inactive\");\n      const chatKey = \"\".concat(pairOfPlayers[0], \"-\").concat(pairOfPlayers[1]);\n      const activeChats = player.get(\"activeChats\");\n      console.log(activeChats);\n      return (\n        /*#__PURE__*/\n        // <div style={{height: \"80%\"}}>\n        React.createElement(ChatContainer, {\n          docked: true,\n          key: otherNodeId,\n          player: player,\n          otherPlayer: otherPlayerId,\n          scope: round,\n          timeStamp: timeStamp,\n          customClassName: \"ray-chat-container\",\n          message: Message,\n          footer: Footer,\n          onIncomingMessage: this.logIncomingMessage,\n          customKey: chatKey // isActive={activeChats.includes(chatKey)}\n          ,\n          isOpen: activeChats.includes(chatKey),\n          isActive: true,\n          playerIsOnline: playerIsOnline,\n          onCloseChat: onCloseChat\n        }) // </div>\n\n      );\n    }));\n  }\n\n}","map":{"version":3,"sources":["client/game/SocialExposure.jsx"],"names":["module","export","default","SocialExposure","link","React","v","Chat","ChatContainer","Message","Footer","TimeSync","moment","Slider","Component","audio","Audio","logIncomingMessage","msgs","customKey","game","round","stage","player","props","messages","get","mostRecentMsg","length","console","log","sender","_id","append","verb","subjectId","id","object","at","serverTime","activeChats","includes","play","renderSocialInteraction","otherPlayer","value","render","onCloseChat","network","timeStamp","Date","map","otherNodeId","pairOfPlayers","parseInt","sort","p1","p2","players","find","p","otherPlayerId","playerIsOnline","online","chatKey"],"mappings":"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","sourcesContent":["import \"../chat/style.less\";\n\nimport React from \"react\";\nimport { Chat } from \"@empirica/chat\";\nimport ChatContainer from \"../chat/ChatContainer.js\";\nimport  Message  from \"../chat/Message.js\";\nimport Footer from \"../chat/Footer.js\";\nimport { TimeSync } from \"meteor/mizzao:timesync\";\nimport moment from \"moment\";\nimport Slider from \"meteor/empirica:slider\";\n\n\nexport default class SocialExposure extends React.Component {\n  renderSocialInteraction(otherPlayer) {\n    const value = otherPlayer.round.get(\"value\");\n    return (\n      <div className=\"alter\" key={otherPlayer._id}>\n        <img src={otherPlayer.get(\"avatar\")} className=\"profile-avatar\" />\n        <div className=\"range\">\n          <Slider\n            min={0}\n            max={1}\n            stepSize={0.01}\n            value={value}\n            disabled\n            hideHandleOnEmpty\n          />\n        </div>\n      </div>\n    );\n  }\n\n  audio = new Audio(`sounds/notification-sound-7062.mp3`);\n\n\n  logIncomingMessage = (msgs, customKey) => {\n    const {game, round, stage, player} = this.props;\n\n    const messages = round.get(`${customKey}`)\n    const mostRecentMsg = messages[messages.length -1];\n    console.log(mostRecentMsg);\n    const sender = mostRecentMsg.player._id;\n\n    // TODO: Check if this only appends if player chat is open\n    // onIncomingMessage logs the message for both sender and receiver\n    // Only log one copy of the message\n    if (player._id === sender) {\n      stage.append(\"log\", {\n        verb: \"messageLog\",\n        subjectId: player.id,\n        object: mostRecentMsg,\n        at: moment(TimeSync.serverTime(null, 1000)),\n      })\n    }\n\n    if (player._id !== sender) {\n      console.log(\"Message was sent\");\n      const activeChats = player.get(\"activeChats\");\n      if (!activeChats.includes(customKey)) {\n        console.log(\"Chat closed but message delivered\");\n      }\n\n      this.audio.play();\n\n    }\n  }\n\n  render() {\n    const { game, round, player, onCloseChat, activeChats } = this.props;\n\n    const network = player.get(\"neighbors\");\n    // reactive time value only updates at 1000 ms\n    const timeStamp = new Date(TimeSync.serverTime(null, 1000));\n\n    if (network.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"all-chats-container\">\n        {/* <p>\n          <strong>There are {network.length} other players:</strong>\n        </p> */}\n        {/* {otherPlayers.map(p => this.renderSocialInteraction(p))} */}\n        {/* <Chat player={player} scope={round} /> */}\n\n        {network.map(otherNodeId => {\n          var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherNodeId)];\n          pairOfPlayers.sort((p1,p2) => p1 - p2);\n          const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n          const otherPlayerId = otherPlayer.id;\n          const playerIsOnline = otherPlayer.online === true && !otherPlayer.get(\"inactive\");\n          const chatKey = `${pairOfPlayers[0]}-${pairOfPlayers[1]}`;\n          const activeChats = player.get(\"activeChats\");\n          console.log(activeChats);\n\n          return (\n            // <div style={{height: \"80%\"}}>\n              <ChatContainer\n                docked={true}\n                key={otherNodeId}\n                player={player}\n                otherPlayer={otherPlayerId}\n                scope={round}  \n                timeStamp={timeStamp}\n                customClassName={\"ray-chat-container\"}\n                message={Message}\n                footer={Footer}\n                onIncomingMessage={this.logIncomingMessage}           \n                customKey={chatKey}\n                // isActive={activeChats.includes(chatKey)}\n                isOpen={activeChats.includes(chatKey)}\n                isActive={true}\n                playerIsOnline={playerIsOnline}\n                onCloseChat={onCloseChat}\n              />\n              // </div>\n            )\n          }\n        )}\n\n\n\n\n      </div>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"e4e17ef705183978a23955cc799713da0b85348b"}
