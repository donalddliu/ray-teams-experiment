{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/client/game/TaskResponse.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/game/TaskResponse.jsx","filename":"/Users/donaldliu/Documents/ray-experiment/client/game/TaskResponse.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/client/game/TaskResponse.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/game/TaskResponse.jsx"}},"code":"module.export({\n  default: () => TaskResponse\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Slider;\nmodule.link(\"meteor/empirica:slider\", {\n  default(v) {\n    Slider = v;\n  }\n\n}, 1);\nlet TimeSync;\nmodule.link(\"meteor/mizzao:timesync\", {\n  TimeSync(v) {\n    TimeSync = v;\n  }\n\n}, 2);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 3);\nlet SymbolButton;\nmodule.link(\"./SymbolButton.jsx\", {\n  default(v) {\n    SymbolButton = v;\n  }\n\n}, 4);\n\nclass TaskResponse extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      const {\n        stage,\n        player,\n        game\n      } = this.props;\n      event.preventDefault();\n      stage.append(\"log\", {\n        verb: \"playerSubmitted\",\n        subjectId: player.id,\n        object: true,\n        at: moment(TimeSync.serverTime(null, 1000))\n      });\n      player.set(\"submitted\", true);\n      player.set(\"lastActive\");\n    };\n\n    this.handleReconsider = event => {\n      const {\n        stage,\n        player,\n        game\n      } = this.props;\n      event.preventDefault();\n      console.log(\"Reconsidering...\");\n      player.set(\"submitted\", false);\n      stage.append(\"log\", {\n        verb: \"playerReconsidered\",\n        subjectId: player.id,\n        object: true,\n        at: moment(TimeSync.serverTime(null, 1000))\n      }); // this.setState({selectedButton: \"\"});\n    };\n\n    this.handleButtonSelect = symbolName => {\n      const {\n        stage,\n        player,\n        game\n      } = this.props; // stage.set(\"selectedButton\", symbolName);\n\n      this.setState({\n        selectedButton: symbolName\n      });\n      stage.append(\"log\", {\n        verb: \"selectingSymbol\",\n        subjectId: player.id,\n        object: symbolName,\n        at: moment(TimeSync.serverTime(null, 1000))\n      });\n    };\n\n    this.state = {\n      selectedButton: props.player.get(\"symbolSelected\") | \"\"\n    };\n  }\n\n  renderSubmitted() {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h5\", null, \"Waiting on other players...\"), \"Please wait until all players are ready. If you would like to reconsider your answer, click on the reconsider button.\");\n  }\n\n  renderSlider() {\n    const {\n      player\n    } = this.props;\n    const value = player.round.get(\"value\");\n    return /*#__PURE__*/React.createElement(Slider, {\n      min: 0,\n      max: 1,\n      stepSize: 0.01,\n      labelStepSize: 0.25,\n      onChange: this.handleChange,\n      value: value,\n      hideHandleOnEmpty: true\n    });\n  }\n\n  renderButton() {\n    const {\n      stage,\n      player,\n      game\n    } = this.props; // const task = stage.get(\"task\");\n\n    const selectedSymbol = player.get(\"symbolSelected\");\n    const task = player.get(\"\".concat(stage.displayName));\n    return task.map(symbol => /*#__PURE__*/React.createElement(SymbolButton, {\n      key: symbol,\n      name: symbol,\n      handleButtonSelect: symbolName => this.handleButtonSelect(symbolName),\n      selected: selectedSymbol === symbol,\n      stage: stage,\n      game: game,\n      player: player\n    }));\n  }\n\n  render() {\n    const {\n      stage,\n      round,\n      player,\n      game\n    } = this.props;\n    const selected = player.get(\"symbolSelected\");\n    const submitted = player.get(\"submitted\"); // Create a list of dots to show how many players submitted\n\n    const playersSubmitted = round.get(\"numPlayersSubmitted\");\n    const playersNotSubmitted = game.players.length - playersSubmitted;\n    let filledDots = [];\n    let unfilledDots = [];\n\n    for (let i = 0; i < playersSubmitted; i++) {\n      filledDots.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: \"filled-dot\"\n      }));\n    }\n\n    for (let i = 0; i < playersNotSubmitted; i++) {\n      unfilledDots.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: \"empty-dot\"\n      }));\n    } // If the player already submitted, don't show the slider or submit button\n\n\n    const disabled = player.get(\"submitted\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-response-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-response-header\"\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"header\"\n    }, \" MY CARD\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"submission-dots-container\"\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"header\"\n    }, \" SUBMITTED ANSWERS \"), filledDots, unfilledDots)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-response-body\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-response\"\n    }, this.renderButton())), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\"\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      style: {\n        opacity: submitted ? 0 : 1\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: !selected || submitted ? \"arrow-button button-submit-disabled\" : \"arrow-button button-submit\",\n      disabled: !selected || submitted ? true : false,\n      type: \"submit\"\n    }, \" Submit \")), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleReconsider,\n      style: {\n        opacity: !submitted ? 0 : 1\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: !submitted ? \"arrow-button button-reconsider-disabled\" : \"arrow-button button-reconsider\",\n      disabled: !submitted ? true : false\n    }, \" Reconsider \"))));\n  }\n\n}","map":{"version":3,"sources":["client/game/TaskResponse.jsx"],"names":["module","export","default","TaskResponse","React","link","v","Slider","TimeSync","moment","SymbolButton","Component","constructor","props","handleSubmit","event","stage","player","game","preventDefault","append","verb","subjectId","id","object","at","serverTime","set","handleReconsider","console","log","handleButtonSelect","symbolName","setState","selectedButton","state","get","renderSubmitted","renderSlider","value","round","handleChange","renderButton","selectedSymbol","task","displayName","map","symbol","render","selected","submitted","playersSubmitted","playersNotSubmitted","players","length","filledDots","unfilledDots","i","push","disabled","opacity"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Slider from \"meteor/empirica:slider\";\nimport { TimeSync } from \"meteor/mizzao:timesync\";\nimport moment from \"moment\";\n\nimport SymbolButton from \"./SymbolButton.jsx\";\n\nexport default class TaskResponse extends React.Component {\n  constructor(props) {\n    super(props);  \n    this.state = {\n      selectedButton: props.player.get(\"symbolSelected\") | \"\",\n    }\n  }\n\n  handleSubmit = event => {\n    const { stage, player, game } = this.props;\n\n    event.preventDefault();\n\n    stage.append(\"log\", {\n      verb: \"playerSubmitted\",\n      subjectId: player.id,\n      object: true,\n      at: moment(TimeSync.serverTime(null, 1000)),\n    })\n    player.set(\"submitted\", true);\n    player.set(\"lastActive\", )\n  };\n\n  handleReconsider = event => {\n    const { stage, player, game } = this.props;\n\n    event.preventDefault();\n    console.log(\"Reconsidering...\");\n    player.set(\"submitted\", false);\n\n    stage.append(\"log\", {\n      verb: \"playerReconsidered\",\n      subjectId: player.id,\n      object: true,\n      at: moment(TimeSync.serverTime(null, 1000)),\n    })\n\n    // this.setState({selectedButton: \"\"});\n\n  }\n\n  handleButtonSelect= (symbolName) => {\n    const { stage, player, game } = this.props;\n    // stage.set(\"selectedButton\", symbolName);\n    this.setState({selectedButton: symbolName});\n\n    stage.append(\"log\", {\n      verb: \"selectingSymbol\",\n      subjectId: player.id,\n      object: symbolName,\n      at: moment(TimeSync.serverTime(null, 1000)),\n    });\n\n  }\n\n  renderSubmitted() {\n    return (\n      <div>\n        <h5>Waiting on other players...</h5>\n        Please wait until all players are ready. If you would like to reconsider your answer, click on the reconsider button.\n      </div>\n    );\n  }\n\n  renderSlider() {\n    const { player } = this.props;\n    const value = player.round.get(\"value\");\n    return (\n      <Slider\n        min={0}\n        max={1}\n        stepSize={0.01}\n        labelStepSize={0.25}\n        onChange={this.handleChange}\n        value={value}\n        hideHandleOnEmpty\n      />\n    );\n  }\n\n  renderButton() {\n    const { stage, player, game } = this.props;\n    // const task = stage.get(\"task\");\n    const selectedSymbol = player.get(\"symbolSelected\")\n    const task = player.get(`${stage.displayName}`)\n    return (\n      task.map((symbol) => \n      <SymbolButton \n        key={symbol}\n        name={symbol}\n        handleButtonSelect={(symbolName) => this.handleButtonSelect(symbolName)}\n        selected={selectedSymbol === symbol}\n        stage={stage}\n        game={game}\n        player={player}\n      />\n      )\n    );\n  }\n\n  render() {\n    const { stage, round, player, game } = this.props;\n\n\n    const selected = player.get(\"symbolSelected\")\n    const submitted = player.get(\"submitted\");\n\n    // Create a list of dots to show how many players submitted\n    const playersSubmitted = round.get(\"numPlayersSubmitted\");\n    const playersNotSubmitted = game.players.length - playersSubmitted;\n    let filledDots = [];\n    let unfilledDots = [];\n    for (let i = 0; i < playersSubmitted; i++) {\n      filledDots.push(<span className=\"filled-dot\"></span>)\n    }\n    for (let i = 0; i < playersNotSubmitted; i++) {\n      unfilledDots.push(<span className=\"empty-dot\"></span>)\n    }\n\n    // If the player already submitted, don't show the slider or submit button\n    \n    const disabled = player.get(\"submitted\");\n    return (\n      <div className=\"task-response-container\">\n        <div className=\"task-response-header\">\n          <p className=\"header\"> MY CARD</p>\n          <div className=\"submission-dots-container\">\n            <p className=\"header\"> SUBMITTED ANSWERS </p>\n            {filledDots}\n            {unfilledDots}\n          </div>\n        </div>\n        <div className=\"task-response-body\">\n          {/* <div className=\"submission-message-container\">\n            {submitted ? this.renderSubmitted() : \"\"}\n          </div> */}\n          <div className=\"task-response\">\n              {this.renderButton()}\n          </div>\n        </div>\n          <div className=\"button-container\">\n              <form onSubmit={this.handleSubmit} style={{opacity: submitted ? 0 : 1}}>\n                <button \n                  className={!selected || submitted ? \"arrow-button button-submit-disabled\" : \"arrow-button button-submit\"} \n                  disabled= {!selected || submitted ? true : false} type=\"submit\"> Submit </button> \n              </form>\n              <form onSubmit={this.handleReconsider} style={{opacity: !submitted ? 0 : 1}}>\n                <button className={!submitted ? \"arrow-button button-reconsider-disabled\" : \"arrow-button button-reconsider\"} disabled={!submitted ? true : false}> Reconsider </button> \n              </form>\n          </div>\n\n        </div>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"3b44c4c079f724d4c47356eb9131accd10d1b31b"}
