{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/client/game/SocialExposure.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/game/SocialExposure.jsx","filename":"/Users/donaldliu/Documents/ray-experiment/client/game/SocialExposure.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/client/game/SocialExposure.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/game/SocialExposure.jsx"}},"code":"module.export({\n  default: () => SocialExposure\n});\nmodule.link(\"../chat/style.less\");\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Chat;\nmodule.link(\"@empirica/chat\", {\n  Chat(v) {\n    Chat = v;\n  }\n\n}, 1);\nlet ChatContainer;\nmodule.link(\"../chat/ChatContainer.js\", {\n  default(v) {\n    ChatContainer = v;\n  }\n\n}, 2);\nlet Message;\nmodule.link(\"../chat/Message.js\", {\n  default(v) {\n    Message = v;\n  }\n\n}, 3);\nlet Footer;\nmodule.link(\"../chat/Footer.js\", {\n  default(v) {\n    Footer = v;\n  }\n\n}, 4);\nlet TimeSync;\nmodule.link(\"meteor/mizzao:timesync\", {\n  TimeSync(v) {\n    TimeSync = v;\n  }\n\n}, 5);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 6);\nlet Slider;\nmodule.link(\"meteor/empirica:slider\", {\n  default(v) {\n    Slider = v;\n  }\n\n}, 7);\n\nclass SocialExposure extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onOpenChat = customKey => {\n      const {\n        player\n      } = this.props; // var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherPlayerNodeId)];\n      // pairOfPlayers.sort((p1,p2) => p1 - p2);\n      // var customKey = `${pairOfPlayers[0]}-${pairOfPlayers[1]}`;\n      // console.log(this.state);\n      // console.log(this.state.activeChats);\n\n      if (!this.state.activeChats.includes(customKey)) {\n        this.state.activeChats.push(customKey);\n        player.set(\"activeChats\", this.state.activeChats);\n      }\n\n      console.log(\"Open Chat\");\n    };\n\n    this.onCloseChat = customKey => {\n      const {\n        player\n      } = this.props;\n      const newActiveChats = this.state.activeChats.filter(chat => chat !== customKey);\n      this.setState({\n        activeChats: newActiveChats\n      });\n      player.set(\"activeChats\", newActiveChats);\n      console.log(\"Close chat\");\n      console.log(this.state);\n    };\n\n    this.audio = new Audio(\"sounds/notification-sound-7062.mp3\");\n\n    this.logIncomingMessage = (msgs, customKey) => {\n      const {\n        game,\n        round,\n        stage,\n        player\n      } = this.props;\n      const messages = round.get(\"\".concat(customKey));\n      const mostRecentMsg = messages[messages.length - 1];\n      console.log(mostRecentMsg);\n      const sender = mostRecentMsg.player._id; // TODO: Check if this only appends if player chat is open\n      // onIncomingMessage logs the message for both sender and receiver\n      // Only log one copy of the message\n\n      if (player._id === sender) {\n        stage.append(\"log\", {\n          verb: \"messageLog\",\n          subjectId: player.id,\n          object: mostRecentMsg,\n          at: moment(TimeSync.serverTime(null, 1000))\n        });\n        const pairOfPlayers = customKey.split(\"-\");\n        console.log(pairOfPlayers);\n        console.log(\"My nodeId = \".concat(player.get(\"nodeId\")));\n        const receiverId = pairOfPlayers.filter(id => parseInt(id) !== player.get(\"nodeId\"));\n        console.log(receiverId);\n        const receiver = game.players.find(p => p.get(\"nodeId\") === parseInt(receiverId));\n        const receiverChats = receiver.get(\"activeChats\");\n        if (receiver.get(\"ac\")) console.log(receiver.id);\n        console.log(receiver.get(\"activeChats\"));\n      }\n\n      if (player._id !== sender) {\n        console.log(\"Message was sent\");\n        const activeChats = player.get(\"activeChats\");\n        console.log(\"------\");\n        console.log(activeChats);\n        console.log(\"------\");\n\n        if (!activeChats.includes(customKey)) {\n          console.log(\"Chat closed but message delivered\");\n        }\n\n        this.audio.play();\n      }\n    };\n\n    this.state = {\n      activeChats: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      player\n    } = this.props; // Set the player's first activity at the start of the round\n\n    const activeChats = player.get(\"activeChats\");\n    this.setState({\n      activeChats: activeChats\n    });\n  }\n\n  render() {\n    const {\n      game,\n      round,\n      player,\n      activeChats\n    } = this.props;\n    const network = player.get(\"neighbors\"); // reactive time value only updates at 1000 ms\n\n    const timeStamp = new Date(TimeSync.serverTime(null, 1000));\n\n    if (network.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"all-chats-container\"\n    }, network.map(otherNodeId => {\n      var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherNodeId)];\n      pairOfPlayers.sort((p1, p2) => p1 - p2);\n      const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n      const otherPlayerId = otherPlayer.id;\n      const playerIsOnline = otherPlayer.online === true && !otherPlayer.get(\"inactive\");\n      const chatKey = \"\".concat(pairOfPlayers[0], \"-\").concat(pairOfPlayers[1]);\n      const activeChats = player.get(\"activeChats\");\n      console.log(activeChats);\n      console.log(activeChats.includes(chatKey));\n      return (\n        /*#__PURE__*/\n        // <div style={{height: \"80%\"}}>\n        React.createElement(ChatContainer, {\n          docked: true,\n          key: otherNodeId,\n          player: player,\n          otherPlayer: otherPlayerId,\n          scope: round,\n          timeStamp: timeStamp,\n          customClassName: \"ray-chat-container\",\n          message: Message,\n          footer: Footer,\n          onIncomingMessage: this.logIncomingMessage,\n          customKey: chatKey // isActive={activeChats.includes(chatKey)}\n          ,\n          isOpen: activeChats.includes(chatKey),\n          playerIsOnline: playerIsOnline,\n          onOpenChat: customKey => this.onOpenChat(customKey),\n          onCloseChat: customKey => this.onCloseChat(customKey)\n        }) // </div>\n\n      );\n    }));\n  }\n\n}","map":{"version":3,"sources":["client/game/SocialExposure.jsx"],"names":["module","export","default","SocialExposure","link","React","v","Chat","ChatContainer","Message","Footer","TimeSync","moment","Slider","Component","constructor","props","onOpenChat","customKey","player","state","activeChats","includes","push","set","console","log","onCloseChat","newActiveChats","filter","chat","setState","audio","Audio","logIncomingMessage","msgs","game","round","stage","messages","get","mostRecentMsg","length","sender","_id","append","verb","subjectId","id","object","at","serverTime","pairOfPlayers","split","receiverId","parseInt","receiver","players","find","p","receiverChats","play","componentDidMount","render","network","timeStamp","Date","map","otherNodeId","sort","p1","p2","otherPlayer","otherPlayerId","playerIsOnline","online","chatKey"],"mappings":"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","sourcesContent":["import \"../chat/style.less\";\n\nimport React from \"react\";\nimport { Chat } from \"@empirica/chat\";\nimport ChatContainer from \"../chat/ChatContainer.js\";\nimport  Message  from \"../chat/Message.js\";\nimport Footer from \"../chat/Footer.js\";\nimport { TimeSync } from \"meteor/mizzao:timesync\";\nimport moment from \"moment\";\nimport Slider from \"meteor/empirica:slider\";\n\n\nexport default class SocialExposure extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeChats: [],\n    }\n  }\n\n  componentDidMount() {\n    const {player} = this.props;\n    // Set the player's first activity at the start of the round\n    const activeChats = player.get(\"activeChats\");\n    this.setState({activeChats: activeChats});\n  }\n\n  onOpenChat = (customKey) => {\n    const {player} = this.props;\n    // var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherPlayerNodeId)];\n    // pairOfPlayers.sort((p1,p2) => p1 - p2);\n    // var customKey = `${pairOfPlayers[0]}-${pairOfPlayers[1]}`;\n    // console.log(this.state);\n    // console.log(this.state.activeChats);\n    if (!this.state.activeChats.includes(customKey)) {\n      this.state.activeChats.push(customKey);\n      player.set(\"activeChats\", this.state.activeChats);\n    }\n    console.log(\"Open Chat\");\n  }\n\n  onCloseChat = (customKey) => {\n    const {player} = this.props;\n    const newActiveChats = this.state.activeChats.filter((chat) => chat !== customKey);\n    this.setState({activeChats : newActiveChats});\n    player.set(\"activeChats\", newActiveChats);\n    console.log(\"Close chat\");\n    console.log(this.state);\n  }\n\n\n  audio = new Audio(`sounds/notification-sound-7062.mp3`);\n\n\n  logIncomingMessage = (msgs, customKey) => {\n    const {game, round, stage, player} = this.props;\n\n    const messages = round.get(`${customKey}`)\n    const mostRecentMsg = messages[messages.length -1];\n    console.log(mostRecentMsg);\n    const sender = mostRecentMsg.player._id;\n\n    // TODO: Check if this only appends if player chat is open\n    // onIncomingMessage logs the message for both sender and receiver\n    // Only log one copy of the message\n    if (player._id === sender) {\n      stage.append(\"log\", {\n        verb: \"messageLog\",\n        subjectId: player.id,\n        object: mostRecentMsg,\n        at: moment(TimeSync.serverTime(null, 1000)),\n      })\n      const pairOfPlayers = customKey.split(\"-\");\n      console.log(pairOfPlayers);\n      console.log(`My nodeId = ${player.get(\"nodeId\")}`);\n      const receiverId = pairOfPlayers.filter((id) => parseInt(id) !== player.get(\"nodeId\")); \n      console.log(receiverId);\n      const receiver = game.players.find(p => p.get(\"nodeId\") === parseInt(receiverId));\n      const receiverChats = receiver.get(\"activeChats\");\n      if (receiver.get(\"ac\"))\n      \n      console.log(receiver.id);\n      console.log(receiver.get(\"activeChats\"));\n    }\n\n    if (player._id !== sender) {\n      console.log(\"Message was sent\");\n      const activeChats = player.get(\"activeChats\");\n      console.log(\"------\");\n      console.log(activeChats);\n      console.log(\"------\");\n\n      if (!activeChats.includes(customKey)) {\n        console.log(\"Chat closed but message delivered\");\n      }\n\n      this.audio.play();\n\n    }\n  }\n\n  render() {\n    const { game, round, player, activeChats } = this.props;\n\n    const network = player.get(\"neighbors\");\n    // reactive time value only updates at 1000 ms\n    const timeStamp = new Date(TimeSync.serverTime(null, 1000));\n\n    if (network.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"all-chats-container\">\n        {/* <p>\n          <strong>There are {network.length} other players:</strong>\n        </p> */}\n        {/* <Chat player={player} scope={round} /> */}\n\n        {network.map(otherNodeId => {\n          var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherNodeId)];\n          pairOfPlayers.sort((p1,p2) => p1 - p2);\n          const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n          const otherPlayerId = otherPlayer.id;\n          const playerIsOnline = otherPlayer.online === true && !otherPlayer.get(\"inactive\");\n          const chatKey = `${pairOfPlayers[0]}-${pairOfPlayers[1]}`;\n          const activeChats = player.get(\"activeChats\");\n          console.log(activeChats);\n          console.log(activeChats.includes(chatKey));\n          return (\n            // <div style={{height: \"80%\"}}>\n              <ChatContainer\n                docked={true}\n                key={otherNodeId}\n                player={player}\n                otherPlayer={otherPlayerId}\n                scope={round}  \n                timeStamp={timeStamp}\n                customClassName={\"ray-chat-container\"}\n                message={Message}\n                footer={Footer}\n                onIncomingMessage={this.logIncomingMessage}           \n                customKey={chatKey}\n                // isActive={activeChats.includes(chatKey)}\n                isOpen={activeChats.includes(chatKey)}\n                playerIsOnline={playerIsOnline}\n                onOpenChat = {(customKey) => this.onOpenChat(customKey)} \n                onCloseChat={(customKey) => this.onCloseChat(customKey)} \n              />\n              // </div>\n            )\n          }\n        )}\n\n\n\n\n      </div>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"7f7fe06f85ca2076d6d4ef82fb5d89af9b3a3f98"}
