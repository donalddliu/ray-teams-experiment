{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/main.js","filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"let Empirica;\nmodule.link(\"meteor/empirica:core\", {\n  default(v) {\n    Empirica = v;\n  }\n\n}, 0);\nmodule.link(\"./bots.js\");\nmodule.link(\"./callbacks.js\");\nlet testSymbols;\nmodule.link(\"./constants\", {\n  testSymbols(v) {\n    testSymbols = v;\n  }\n\n}, 1);\nlet getNeighbors;\nmodule.link(\"./util\", {\n  getNeighbors(v) {\n    getNeighbors = v;\n  }\n\n}, 2);\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const {\n    treatment: {\n      playerCount,\n      networkStructure\n    }\n  } = game;\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", \"/avatars/jdenticon/\".concat(player._id));\n    player.set(\"score\", 0); // Give each player a nodeId based on their position (indexed at 1)\n\n    player.set(\"nodeId\", i + 1);\n  });\n  game.players.forEach(p => {\n    p.set(\"neighbors\", getNeighbors(networkStructure, p));\n    console.log(p.get(\"neighbors\"));\n  }); // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n\n  const round = game.addRound();\n\n  _.times(testSymbols.length, i => {\n    const stage = round.addStage({\n      name: i.toString(),\n      displayName: testSymbols[i].taskName,\n      answer: testSymbols[i].answer,\n      durationInSeconds: 300\n    });\n    stage.set(\"task\", testSymbols[i]);\n    stage.set(\"answer\", testSymbols[i].answer); // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n\n  function getSymbolsForPlayers(symbolSet, answer, size, game) {\n    let symbols = symbolSet.split(\",\");\n    let symbolsWithoutAnswer = symbols.filter(symbol => symbol !== answer);\n    let shuffledSymbols = shuffle(symbolsWithoutAnswer);\n    game.players.forEach(p => {\n      // Finding a random splice of symbols\n      const randomIndex = Math.floor(Math.random() * (symbolsWithoutAnswer.length + size - 1));\n      let subset = shuffledSymbols.splice(randomIndex, randomIndex + size); // Adding in the answer in a random spot\n\n      subset.splice(randomIndex % size, 0, answer);\n      p.set(\"task\", subset);\n    });\n  } // Shuffling arrays:\n  // https://stackoverflow.com/questions/50536044/swapping-all-elements-of-an-array-except-for-first-and-last\n\n\n  function shuffle(symbolSet) {\n    for (i = symbolSet.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [symbolSet[i], symbolSet[j]] = [symbolSet[j], symbolSet[i]];\n    }\n\n    return symbolSet;\n  }\n});","map":{"version":3,"sources":["server/main.js"],"names":["Empirica","module","link","default","v","testSymbols","getNeighbors","gameInit","game","treatment","playerCount","networkStructure","players","forEach","player","i","set","_id","p","console","log","get","round","addRound","_","times","length","stage","addStage","name","toString","displayName","taskName","answer","durationInSeconds","getSymbolsForPlayers","symbolSet","size","symbols","split","symbolsWithoutAnswer","filter","symbol","shuffledSymbols","shuffle","randomIndex","Math","floor","random","subset","splice","j"],"mappings":"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","sourcesContent":["import Empirica from \"meteor/empirica:core\";\nimport \"./bots.js\";\nimport \"./callbacks.js\";\n\nimport { testSymbols } from \"./constants\"; \nimport { getNeighbors } from \"./util\";\n\n// gameInit is where the structure of a game is defined.\n// Just before every game starts, once all the players needed are ready, this\n// function is called with the treatment and the list of players.\n// You must then add rounds and stages to the game, depending on the treatment\n// and the players. You can also get/set initial values on your game, players,\n// rounds and stages (with get/set methods), that will be able to use later in\n// the game.\nEmpirica.gameInit(game => {\n  const {\n    treatment: {\n      playerCount,\n      networkStructure,\n    },\n  } = game;\n\n\n\n  game.players.forEach((player, i) => {\n    player.set(\"avatar\", `/avatars/jdenticon/${player._id}`);\n    player.set(\"score\", 0);\n\n    // Give each player a nodeId based on their position (indexed at 1)\n    player.set(\"nodeId\", i + 1);\n  });\n\n  game.players.forEach((p) => {\n    p.set(\"neighbors\", getNeighbors(networkStructure, p));\n    console.log(p.get(\"neighbors\"));\n  });\n\n  // For each round, add all the symbols, randomly select a correct answer and\n  // Constraints: Must ensure that everyone has only one symbol in common\n  const round = game.addRound();\n  _.times( testSymbols.length, i => {\n    const stage = round.addStage({\n      name: i.toString(),\n      displayName: testSymbols[i].taskName,\n      answer: testSymbols[i].answer,\n      durationInSeconds: 300\n    });\n    stage.set(\"task\", testSymbols[i]);\n    stage.set(\"answer\", testSymbols[i].answer)\n\n    // Question: What's the difference between setting something and\n    // adding it into add stage\n  });\n\n\n\n  function getSymbolsForPlayers(symbolSet, answer, size, game) {\n    let symbols = symbolSet.split(\",\");\n    let symbolsWithoutAnswer = symbols.filter(symbol => symbol !== answer);\n    let shuffledSymbols = shuffle(symbolsWithoutAnswer);\n\n\n    game.players.forEach((p) => {\n      // Finding a random splice of symbols\n      const randomIndex = Math.floor(Math.random() * (symbolsWithoutAnswer.length + size - 1));\n      let subset = shuffledSymbols.splice(randomIndex, randomIndex + size)\n      \n      // Adding in the answer in a random spot\n      subset.splice(randomIndex % size, 0, answer);\n      p.set(\"task\", subset);\n    })\n\n\n  }\n\n  // Shuffling arrays:\n  // https://stackoverflow.com/questions/50536044/swapping-all-elements-of-an-array-except-for-first-and-last\n  function shuffle(symbolSet) {\n    for (i = symbolSet.length -1 ; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [symbolSet[i], symbolSet[j]] = [symbolSet[j], symbolSet[i]];\n    }\n    return symbolSet;\n  }\n\n});\n"]},"sourceType":"module","hash":"bae471212572d56c4efaa9ea35396b7692cacf44"}
