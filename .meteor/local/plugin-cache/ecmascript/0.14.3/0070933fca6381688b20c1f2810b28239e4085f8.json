{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/server/callbacks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/callbacks.js","filename":"/Users/donaldliu/Documents/ray-experiment/server/callbacks.js","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/server/callbacks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/callbacks.js"}},"code":"let Empirica;\nmodule.link(\"meteor/empirica:core\", {\n  default(v) {\n    Empirica = v;\n  }\n\n}, 0);\nlet getFullyConnectedLayer;\nmodule.link(\"./util\", {\n  getFullyConnectedLayer(v) {\n    getFullyConnectedLayer = v;\n  }\n\n}, 1);\n// onGameStart is triggered opnce per game before the game starts, and before\n// the first onRoundStart. It receives the game and list of all the players in\n// the game.\nEmpirica.onGameStart(game => {\n  console.log(\"Game started\");\n  game.players.forEach(player => {\n    player.set(\"inactive\", false);\n    const network = player.get(\"neighbors\");\n    const activeChats = [];\n    network.map(otherNodeId => {\n      var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherNodeId)];\n      pairOfPlayers.sort((p1, p2) => p1 - p2);\n      const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n      const otherPlayerId = otherPlayer.id;\n      const chatKey = \"\".concat(pairOfPlayers[0], \"-\").concat(pairOfPlayers[1]);\n      activeChats.push(chatKey);\n    }); // Default all chats to be open when game starts\n\n    player.set(\"activeChats\", activeChats);\n  });\n  game.set(\"previousNumActivePlayers\", game.players.length);\n}); // onRoundStart is triggered before each round starts, and before onStageStart.\n// It receives the same options as onGameStart, and the round that is starting.\n\nEmpirica.onRoundStart((game, round) => {\n  game.players.forEach(player => {\n    player.set(\"submitted\", false);\n    player.set(\"symbolSelected\", \"\");\n  });\n  round.set(\"result\", false);\n  round.set(\"numPlayersSubmitted\", 0);\n  const activePlayers = game.players.filter(p => p.online === true && !p.get(\"inactive\")); // const activePlayers = game.players.filter(p => !p.get(\"inactive\"));\n\n  if (activePlayers.length < game.get(\"previousNumActivePlayers\")) {\n    // Someone left in the middle of the round\n    getFullyConnectedLayer(game); // Updates the neighbors to be fully connected\n  }\n\n  game.set(\"previousNumActivePlayers\", activePlayers.length);\n  console.log(\"Round Started\");\n}); // onStageStart is triggered before each stage starts.\n// It receives the same options as onRoundStart, and the stage that is starting.\n\nEmpirica.onStageStart((game, round, stage) => {\n  console.log(\"Stage Started\");\n  const activePlayers = game.players.filter(p => p.online === true && !p.get(\"inactive\"));\n\n  if (stage.name === \"Task\") {\n    activePlayers.forEach(player => {\n      console.log(player.id);\n      console.log(\"Symbols : \".concat(player.get(\"\".concat(stage.displayName))));\n    });\n    console.log(\"Answer: \".concat(stage.get(\"answer\")));\n  }\n\n  if (stage.name === \"Survey\") {\n    activePlayers.forEach(player => {\n      player.set(\"surveyNumber\", 1);\n    });\n  } // game.players.forEach((player) => {\n  //   player.set(\"submitted\", false);\n  // });\n  // stage.set(\"showResults\", false);\n  // stage.set(\"resultsShown\", false);\n\n}); // onStageEnd is triggered after each stage.\n// It receives the same options as onRoundEnd, and the stage that just ended.\n\nEmpirica.onStageEnd((game, round, stage) => {\n  console.log(\"Stage Ended\");\n}); // onRoundEnd is triggered after each round.\n// It receives the same options as onGameEnd, and the round that just ended.\n\nEmpirica.onRoundEnd((game, round) => {// game.players.forEach(player => {\n  //   const value = player.round.get(\"value\") || 0;\n  //   const prevScore = player.get(\"score\") || 0;\n  //   player.set(\"score\", prevScore + value);\n  // });\n}); // onGameEnd is triggered when the game ends.\n// It receives the same options as onGameStart.\n\nEmpirica.onGameEnd(game => {}); // ===========================================================================\n// => onSet, onAppend and onChange ==========================================\n// ===========================================================================\n// onSet, onAppend and onChange are called on every single update made by all\n// players in each game, so they can rapidly become quite expensive and have\n// the potential to slow down the app. Use wisely.\n//\n// It is very useful to be able to react to each update a user makes. Try\n// nontheless to limit the amount of computations and database saves (.set)\n// done in these callbacks. You can also try to limit the amount of calls to\n// set() and append() you make (avoid calling them on a continuous drag of a\n// slider for example) and inside these callbacks use the `key` argument at the\n// very beginning of the callback to filter out which keys your need to run\n// logic against.\n//\n// If you are not using these callbacks, comment them out so the system does\n// not call them for nothing.\n// // onSet is called when the experiment code call the .set() method\n// // on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onSet((\n//   game,\n//   round,\n//   stage,\n//   player, // Player who made the change\n//   target, // Object on which the change was made (eg. player.set() => player)\n//   targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//   key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//   value, // New value\n//   prevValue // Previous value\n// ) => {\n//   // // Example filtering\n//   // if (key !== \"value\") {\n//   //   return;\n//   // }\n// });\n\nEmpirica.onSet((game, round, stage, player, // Player who made the change\ntarget, // Object on which the change was made (eg. player.set() => player)\ntargetType, // Type of object on which the change was made (eg. player.set() => \"player\")\nkey, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\nvalue, // New value\nprevValue // Previous value\n) => {\n  const players = game.players;\n  const activePlayers = game.players.filter(p => p.online === true && !p.get(\"inactive\")); // const activePlayers = game.players.filter(p => !p.get(\"inactive\"));\n  // Some player decides to reconsider their answer\n\n  console.log(\"key\", key);\n\n  if (key === \"submitted\") {\n    console.log(\"Updated a submission\"); // Checks if everyone has submitted their answer and if so, submit the stage\n\n    let allSubmitted = true;\n    let numPlayersSubmitted = 0;\n    activePlayers.forEach(player => {\n      if (player.get(\"submitted\")) {\n        numPlayersSubmitted += 1;\n      }\n\n      allSubmitted = player.get(\"submitted\") && allSubmitted;\n    });\n    round.set(\"numPlayersSubmitted\", numPlayersSubmitted);\n\n    if (allSubmitted) {\n      const log = stage.get(\"log\");\n      computeScore(activePlayers, stage, round); // Need to submit for submit the stage for every player\n\n      game.players.forEach(player => {\n        player.stage.submit();\n      });\n    } //   if (stage.get(\"resultsShown\")) {\n    //     players.forEach((player) => {\n    //       player.stage.submit();\n    //     })\n    //   }\n    // }\n    // if (targetType === \"stage\" && key === \"resultsShown\") {\n    //   if (stage.get(\"resultsShown\")) {\n    //     players.forEach((player) => {\n    //       player.stage.submit();\n    //     })\n    //   }\n\n  } // else if (key === \"inactive\") {\n  // getFullyConnectedLayer(game);\n  // }\n\n\n  return;\n});\n\nfunction computeScore(activePlayers, stage, round) {\n  let success = true;\n  console.log(\"CORRECT ANSWER:\");\n  console.log(stage.get(\"answer\"));\n  console.log(\"Players guessed:\");\n  activePlayers.forEach(player => {\n    const submission = player.get(\"symbolSelected\");\n    console.log(submission);\n\n    if (submission !== stage.get(\"answer\")) {\n      success = false;\n    }\n  });\n  round.set(\"result\", success);\n\n  if (success) {\n    activePlayers.forEach(player => {\n      const prevScore = player.get(\"score\") || 0;\n      player.set(\"score\", prevScore + 1);\n    });\n    console.log(\" All players got it correctly\");\n  }\n} // // onAppend is called when the experiment code call the `.append()` method\n// // on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onAppend((\n//   game,\n//   round,\n//   stage,\n//   player, // Player who made the change\n//   target, // Object on which the change was made (eg. player.set() => player)\n//   targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//   key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//   value, // New value\n//   prevValue // Previous value\n// ) => {\n//   // Note: `value` is the single last value (e.g 0.2), while `prevValue` will\n//   //       be an array of the previsous valued (e.g. [0.3, 0.4, 0.65]).\n// });\n// // onChange is called when the experiment code call the `.set()` or the\n// // `.append()` method on games, rounds, stages, players, playerRounds or\n// // playerStages.\n// Empirica.onChange((\n//   game,\n//   round,\n//   stage,\n//   player, // Player who made the change\n//   target, // Object on which the change was made (eg. player.set() => player)\n//   targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//   key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//   value, // New value\n//   prevValue, // Previous value\n//   isAppend // True if the change was an append, false if it was a set\n// ) => {\n//   // `onChange` is useful to run server-side logic for any user interaction.\n//   // Note the extra isAppend boolean that will allow to differenciate sets and\n//   // appends.\n//    Game.set(\"lastChangeAt\", new Date().toString())\n// });\n// // onSubmit is called when the player submits a stage.\n// Empirica.onSubmit((\n//   game,\n//   round,\n//   stage,\n//   player // Player who submitted\n// ) => {\n// });","map":{"version":3,"sources":["server/callbacks.js"],"names":["Empirica","module","link","default","v","getFullyConnectedLayer","onGameStart","game","console","log","players","forEach","player","set","network","get","activeChats","map","otherNodeId","pairOfPlayers","parseInt","sort","p1","p2","otherPlayer","find","p","otherPlayerId","id","chatKey","push","length","onRoundStart","round","activePlayers","filter","online","onStageStart","stage","name","displayName","onStageEnd","onRoundEnd","onGameEnd","onSet","target","targetType","key","value","prevValue","allSubmitted","numPlayersSubmitted","computeScore","submit","success","submission","prevScore"],"mappings":"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","sourcesContent":["import Empirica from \"meteor/empirica:core\";\n\nimport { getFullyConnectedLayer } from \"./util\";\n\n\n// onGameStart is triggered opnce per game before the game starts, and before\n// the first onRoundStart. It receives the game and list of all the players in\n// the game.\nEmpirica.onGameStart(game => {\n  console.log(\"Game started\");\n  game.players.forEach((player) => {\n    player.set(\"inactive\", false);\n    const network = player.get(\"neighbors\");\n    const activeChats = [];\n    network.map(otherNodeId => {\n      var pairOfPlayers = [player.get(\"nodeId\"), parseInt(otherNodeId)];\n      pairOfPlayers.sort((p1,p2) => p1 - p2);\n      const otherPlayer = game.players.find(p => p.get(\"nodeId\") === parseInt(otherNodeId));\n      const otherPlayerId = otherPlayer.id;\n      const chatKey = `${pairOfPlayers[0]}-${pairOfPlayers[1]}`;\n      activeChats.push(chatKey);\n    });\n    // Default all chats to be open when game starts\n    player.set(\"activeChats\", activeChats);\n  });\n  game.set(\"previousNumActivePlayers\", game.players.length);\n});\n\n// onRoundStart is triggered before each round starts, and before onStageStart.\n// It receives the same options as onGameStart, and the round that is starting.\nEmpirica.onRoundStart((game, round) => {\n  game.players.forEach((player) => {\n    player.set(\"submitted\", false);\n    player.set(\"symbolSelected\", \"\");\n  });\n  round.set(\"result\", false);\n  round.set(\"numPlayersSubmitted\", 0);\n  const activePlayers = game.players.filter(p => p.online === true && !p.get(\"inactive\"));\n  // const activePlayers = game.players.filter(p => !p.get(\"inactive\"));\n\n  if (activePlayers.length < game.get(\"previousNumActivePlayers\") ) { // Someone left in the middle of the round\n    getFullyConnectedLayer(game); // Updates the neighbors to be fully connected\n  }\n  game.set(\"previousNumActivePlayers\", activePlayers.length);\n\n  console.log(\"Round Started\");\n\n});\n\n// onStageStart is triggered before each stage starts.\n// It receives the same options as onRoundStart, and the stage that is starting.\nEmpirica.onStageStart((game, round, stage) => {\n  console.log(\"Stage Started\")\n  const activePlayers = game.players.filter(p => p.online === true && !p.get(\"inactive\"));\n  if (stage.name === \"Task\") {\n    activePlayers.forEach((player) => {\n      console.log(player.id);\n      console.log( `Symbols : ${player.get(`${stage.displayName}`)}`);\n    });\n    console.log(`Answer: ${stage.get(\"answer\")}`);\n  }\n  if (stage.name === \"Survey\") {\n    activePlayers.forEach((player) => {\n      player.set(\"surveyNumber\" , 1)\n    });\n  }\n  // game.players.forEach((player) => {\n  //   player.set(\"submitted\", false);\n  // });\n  // stage.set(\"showResults\", false);\n  // stage.set(\"resultsShown\", false);\n\n});\n\n// onStageEnd is triggered after each stage.\n// It receives the same options as onRoundEnd, and the stage that just ended.\nEmpirica.onStageEnd((game, round, stage) =>{\n  console.log(\"Stage Ended\")\n  \n});\n\n// onRoundEnd is triggered after each round.\n// It receives the same options as onGameEnd, and the round that just ended.\nEmpirica.onRoundEnd((game, round) => {\n  // game.players.forEach(player => {\n  //   const value = player.round.get(\"value\") || 0;\n  //   const prevScore = player.get(\"score\") || 0;\n  //   player.set(\"score\", prevScore + value);\n  // });\n\n});\n\n// onGameEnd is triggered when the game ends.\n// It receives the same options as onGameStart.\nEmpirica.onGameEnd(game => {});\n\n// ===========================================================================\n// => onSet, onAppend and onChange ==========================================\n// ===========================================================================\n\n// onSet, onAppend and onChange are called on every single update made by all\n// players in each game, so they can rapidly become quite expensive and have\n// the potential to slow down the app. Use wisely.\n//\n// It is very useful to be able to react to each update a user makes. Try\n// nontheless to limit the amount of computations and database saves (.set)\n// done in these callbacks. You can also try to limit the amount of calls to\n// set() and append() you make (avoid calling them on a continuous drag of a\n// slider for example) and inside these callbacks use the `key` argument at the\n// very beginning of the callback to filter out which keys your need to run\n// logic against.\n//\n// If you are not using these callbacks, comment them out so the system does\n// not call them for nothing.\n\n// // onSet is called when the experiment code call the .set() method\n// // on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onSet((\n//   game,\n//   round,\n//   stage,\n//   player, // Player who made the change\n//   target, // Object on which the change was made (eg. player.set() => player)\n//   targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//   key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//   value, // New value\n//   prevValue // Previous value\n// ) => {\n//   // // Example filtering\n//   // if (key !== \"value\") {\n//   //   return;\n//   // }\n// });\n\nEmpirica.onSet((\n  game,\n  round,\n  stage,\n  player, // Player who made the change\n  target, // Object on which the change was made (eg. player.set() => player)\n  targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n  key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n  value, // New value\n  prevValue // Previous value\n) => {\n  const players = game.players;\n  const activePlayers = game.players.filter(p => p.online === true && !p.get(\"inactive\"));\n  // const activePlayers = game.players.filter(p => !p.get(\"inactive\"));\n\n  // Some player decides to reconsider their answer\n  console.log(\"key\", key);\n  if (key === \"submitted\") { \n    console.log(\"Updated a submission\");\n    // Checks if everyone has submitted their answer and if so, submit the stage\n    let allSubmitted = true;\n    let numPlayersSubmitted = 0;\n    activePlayers.forEach((player) => {\n      if (player.get(\"submitted\")) {\n        numPlayersSubmitted += 1;\n      }\n      allSubmitted = player.get(\"submitted\") && allSubmitted;\n    })\n    round.set(\"numPlayersSubmitted\", numPlayersSubmitted);\n    if (allSubmitted) {\n      const log = stage.get(\"log\");\n      computeScore(activePlayers, stage, round);\n      // Need to submit for submit the stage for every player\n      game.players.forEach((player) => {\n        player.stage.submit();\n      })\n    }\n  //   if (stage.get(\"resultsShown\")) {\n  //     players.forEach((player) => {\n  //       player.stage.submit();\n  //     })\n  //   }\n  // }\n\n  // if (targetType === \"stage\" && key === \"resultsShown\") {\n  //   if (stage.get(\"resultsShown\")) {\n  //     players.forEach((player) => {\n  //       player.stage.submit();\n  //     })\n  //   }\n  }\n\n  // else if (key === \"inactive\") {\n    // getFullyConnectedLayer(game);\n  // }\n\n  return;\n\n});\n\nfunction computeScore(activePlayers, stage, round) {\n  let success = true;\n  console.log(\"CORRECT ANSWER:\")\n  console.log(stage.get(\"answer\"));\n  console.log(\"Players guessed:\")\n\n  activePlayers.forEach(player => {\n    const submission = player.get(\"symbolSelected\");\n    console.log(submission);\n    if (submission !== stage.get(\"answer\")) {\n      success = false\n    }\n  })\n  round.set(\"result\", success);\n  if (success) {\n    activePlayers.forEach(player => {\n      const prevScore = player.get(\"score\") || 0;\n      player.set(\"score\", prevScore + 1);\n    })\n    console.log(\" All players got it correctly\");\n  } \n}\n\n// // onAppend is called when the experiment code call the `.append()` method\n// // on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onAppend((\n//   game,\n//   round,\n//   stage,\n//   player, // Player who made the change\n//   target, // Object on which the change was made (eg. player.set() => player)\n//   targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//   key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//   value, // New value\n//   prevValue // Previous value\n// ) => {\n//   // Note: `value` is the single last value (e.g 0.2), while `prevValue` will\n//   //       be an array of the previsous valued (e.g. [0.3, 0.4, 0.65]).\n// });\n\n\n// // onChange is called when the experiment code call the `.set()` or the\n// // `.append()` method on games, rounds, stages, players, playerRounds or\n// // playerStages.\n// Empirica.onChange((\n//   game,\n//   round,\n//   stage,\n//   player, // Player who made the change\n//   target, // Object on which the change was made (eg. player.set() => player)\n//   targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//   key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//   value, // New value\n//   prevValue, // Previous value\n//   isAppend // True if the change was an append, false if it was a set\n// ) => {\n//   // `onChange` is useful to run server-side logic for any user interaction.\n//   // Note the extra isAppend boolean that will allow to differenciate sets and\n//   // appends.\n//    Game.set(\"lastChangeAt\", new Date().toString())\n// });\n\n// // onSubmit is called when the player submits a stage.\n// Empirica.onSubmit((\n//   game,\n//   round,\n//   stage,\n//   player // Player who submitted\n// ) => {\n// });\n"]},"sourceType":"module","hash":"0070933fca6381688b20c1f2810b28239e4085f8"}
