{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/donaldliu/Documents/ray-experiment/client/game/mid-survey/MidSurvey5.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/game/mid-survey/MidSurvey5.jsx","filename":"/Users/donaldliu/Documents/ray-experiment/client/game/mid-survey/MidSurvey5.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/donaldliu/Documents/ray-experiment","root":"/Users/donaldliu/Documents/ray-experiment","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/donaldliu/Documents/ray-experiment/client/game/mid-survey/MidSurvey5.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/game/mid-survey/MidSurvey5.jsx"}},"code":"module.export({\n  default: () => MidSurveyFive\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Slider;\nmodule.link(\"meteor/empirica:slider\", {\n  default(v) {\n    Slider = v;\n  }\n\n}, 1);\nlet Centered;\nmodule.link(\"meteor/empirica:core\", {\n  Centered(v) {\n    Centered = v;\n  }\n\n}, 2);\nlet PlayerTab;\nmodule.link(\"../PlayerTab\", {\n  default(v) {\n    PlayerTab = v;\n  }\n\n}, 3);\n\nclass MidSurveyFive extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      response: \"\"\n    };\n\n    this.handleChange = event => {\n      const el = event.currentTarget;\n      this.setState({\n        [el.name]: el.value\n      });\n      player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n    };\n\n    this.handleSliderChange = num => {\n      const {\n        stage,\n        player\n      } = this.props; // Rounding the number to 2 decimals max\n\n      this.setState({\n        sliderValue: num\n      });\n      player.stage.set(\"sliderValue\", num);\n    };\n\n    this.renderLabels = val => {\n      if (val === 0) {\n        // Min value\n        return \"\".concat(val, \" Unhappy\");\n      } else if (val === 3) {\n        return \"\".concat(val, \" Neutral\");\n      } else if (val === 6) {\n        // Max value\n        return \"\".concat(val, \" Happy\");\n      }\n\n      return \"\";\n    };\n\n    this.handleSubmit = event => {\n      const {\n        onNext,\n        player\n      } = this.props;\n      const surveyNumber = player.get(\"surveyNumber\");\n      event.preventDefault(); // TODO: log player response to survey question\n\n      player.round.set(\"survey_\".concat(surveyNumber), this.state);\n      player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n      player.set(\"submitted\", true);\n    };\n  }\n\n  render() {\n    const {\n      game,\n      round,\n      stage,\n      player\n    } = this.props;\n    const {\n      response\n    } = this.state;\n    const submitted = player.get(\"submitted\");\n    const surveyNumber = player.get(\"surveyNumber\");\n    const completedWidth = 590 / 5 * surveyNumber;\n    const uncompletedWidth = 590 - completedWidth;\n    const offset = 590 / 5 * 0.5;\n    const stageNumPosition = completedWidth - offset;\n    return /*#__PURE__*/React.createElement(Centered, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"intro-heading questionnaire-heading\"\n    }, \" To complete the challenge, please fill in the following questionnaire \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questionnaire-content-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"completed-bar\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"completed-heading\",\n      style: {\n        marginLeft: stageNumPosition\n      }\n    }, \" \", surveyNumber, \" \"), /*#__PURE__*/React.createElement(\"img\", {\n      src: \"images/hr-color.png\",\n      width: \"\".concat(completedWidth, \" px\"),\n      height: \"7px\"\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      src: \"images/hr-color-dark.png\",\n      width: \"\".concat(uncompletedWidth, \" px\"),\n      height: \"7px\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questionnaire-body\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"questionnaire-question\"\n    }, \" Do you think your group could improve its efficiency? If so, how? \"), /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"survey-textarea\",\n      dir: \"auto\",\n      id: \"response\",\n      name: \"response\",\n      value: response,\n      onChange: this.handleChange\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"questionnaire-btn-container\",\n      onSubmit: this.handleSubmit\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"arrow-button button-submit\",\n      type: \"submit\"\n    }, \" Submit \"))));\n  }\n\n}","map":{"version":3,"sources":["client/game/mid-survey/MidSurvey5.jsx"],"names":["module","export","default","MidSurveyFive","React","link","v","Slider","Centered","PlayerTab","Component","state","response","handleChange","event","el","currentTarget","setState","name","value","player","set","moment","TimeSync","serverTime","handleSliderChange","num","stage","props","sliderValue","renderLabels","val","handleSubmit","onNext","surveyNumber","get","preventDefault","round","render","game","submitted","completedWidth","uncompletedWidth","offset","stageNumPosition","marginLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Slider from \"meteor/empirica:slider\";\n\n\nimport { Centered } from \"meteor/empirica:core\";\nimport PlayerTab from \"../PlayerTab\";\n\nexport default class MidSurveyFive extends React.Component {\n  state = { response: \"\" };\n\n  handleChange = event => {\n    const el = event.currentTarget;\n    this.setState({ [el.name]: el.value });\n    player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n\n  };\n\n  handleSliderChange = num => {\n    const { stage, player } = this.props;\n    // Rounding the number to 2 decimals max\n    this.setState({sliderValue : num}) \n    player.stage.set(\"sliderValue\", num);\n\n  };\n\n  renderLabels = (val) => {\n      if (val === 0) { // Min value\n          return `${val} Unhappy`;\n      } else if (val === 3) {\n          return `${val} Neutral`;\n      } else if (val === 6) { // Max value\n          return `${val} Happy`;\n      }\n      return \"\"\n  }\n\n  handleSubmit = event => {\n    const { onNext, player } = this.props;\n    const surveyNumber = player.get(\"surveyNumber\");\n\n    event.preventDefault();\n    // TODO: log player response to survey question\n    player.round.set(`survey_${surveyNumber}`, this.state);\n    player.set(\"lastActive\", moment(TimeSync.serverTime(null, 1000)));\n\n    player.set(\"submitted\", true);\n  };\n  \n\n  render() {\n    const { game, round, stage, player } = this.props;\n    const { response } = this.state;\n\n    const submitted = player.get(\"submitted\");\n\n    const surveyNumber = player.get(\"surveyNumber\");\n    const completedWidth = 590/5 * surveyNumber\n    const uncompletedWidth = 590 - completedWidth;\n    const offset = 590/5 * 0.5;\n    const stageNumPosition = completedWidth - offset;\n\n    return (\n      <Centered>\n        <div className=\"intro-heading questionnaire-heading\"> To complete the challenge, please fill in the following questionnaire </div>\n            <div className=\"questionnaire-content-container\">\n                <div className=\"progress-bar\">\n                    <div className=\"completed-bar\">\n                        <div className=\"completed-heading\" style={{marginLeft: stageNumPosition }}> {surveyNumber} </div>\n                        <img src={`images/hr-color.png`} width={`${completedWidth} px`} height=\"7px\" />\n                    </div>\n                    <img src={`images/hr-color-dark.png`} width={`${uncompletedWidth} px`} height=\"7px\" />\n                </div>\n                <div className=\"questionnaire-body\">\n                    <label className=\"questionnaire-question\"> Do you think your group could improve its efficiency? If so, how? </label>\n                    <textarea\n                        className=\"survey-textarea\"\n                        dir=\"auto\"\n                        id=\"response\"\n                        name=\"response\"\n                        value={response}\n                        onChange={this.handleChange}\n                    />\n\n                </div>\n                <form className=\"questionnaire-btn-container\" onSubmit={this.handleSubmit}>\n                    <button \n                        className=\"arrow-button button-submit\"\n                        type=\"submit\"> Submit </button> \n                </form>\n            </div>\n      </Centered>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"d71d7b114ea283637299290fae2ab6fc85016fc3"}
